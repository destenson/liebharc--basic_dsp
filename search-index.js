var searchIndex = JSON.parse('{\
"basic_dsp":{"doc":"","i":[[0,"conv_types","basic_dsp","Types around a convolution, see also…",null,null],[8,"RealImpulseResponse","basic_dsp::conv_types","A convolution function in time domain and real number space",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or…",0,[[]]],[10,"calc","","Calculates the convolution for a data point",0,[[]]],[8,"RealFrequencyResponse","","A convolution function in frequency domain and real number…",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or…",1,[[]]],[10,"calc","","Calculates the convolution for a data point",1,[[]]],[8,"ComplexImpulseResponse","","A convolution function in time domain and complex number…",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or…",2,[[]]],[10,"calc","","Calculates the convolution for a data point",2,[[],["complex",3]]],[8,"ComplexFrequencyResponse","","A convolution function in frequency domain and complex…",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or…",3,[[]]],[10,"calc","","Calculates the convolution for a data point",3,[[],["complex",3]]],[3,"RealTimeLinearTableLookup","","Allows to create a lookup table with linear interpolation…",null,null],[3,"RealFrequencyLinearTableLookup","","Allows to create a lookup table with linear interpolation…",null,null],[3,"ComplexTimeLinearTableLookup","","Allows to create a lookup table with linear interpolation…",null,null],[3,"ComplexFrequencyLinearTableLookup","","Allows to create a lookup table with linear interpolation…",null,null],[3,"RaisedCosineFunction","","Raised cosine function according to…",null,null],[3,"SincFunction","","Sinc function according to…",null,null],[0,"meta","basic_dsp","",null,null],[3,"Real","basic_dsp::meta","Marker for types containing real data.",null,null],[3,"Complex","","Marker for types containing complex data.",null,null],[3,"RealOrComplex","","Marker for types containing real or complex data.",null,null],[12,"is_complex_current","","",4,null],[3,"Time","","Marker for types containing time data.",null,null],[3,"Freq","","Marker for types containing frequency data.",null,null],[3,"TimeOrFreq","","Marker for types containing time or frequency data.",null,null],[12,"domain_current","","",5,null],[0,"window_functions","basic_dsp","This mod contains a definition for window functions and…",null,null],[8,"WindowFunction","basic_dsp::window_functions","A window function for FFT windows. See…",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around the y…",6,[[]]],[10,"window","","Calculates a point of the window function. Callers will…",6,[[]]],[3,"TriangularWindow","","A triangular window:…",null,null],[3,"HammingWindow","","A generalized Hamming window:…",null,null],[3,"BlackmanHarrisWindow","","A Blackman-Harris Window:…",null,null],[3,"RectangularWindow","","A rectangular window:…",null,null],[0,"numbers","basic_dsp","Traits from the `num` crate which are used inside…",null,null],[8,"DspNumber","basic_dsp::numbers","A trait for a numeric value which at least supports a…",null,null],[8,"ToSimd","","Associates a number type with a SIMD register type.",null,null],[16,"RegFallback","","Type for the SIMD register on the CPU.",7,null],[16,"RegSse","","",7,null],[16,"RegAvx","","",7,null],[16,"RegAvx512","","",7,null],[16,"GpuReg","","Type for the SIMD register on the GPU. Defaults to an…",7,null],[8,"RealNumber","","A real floating pointer number intended to abstract over…",null,null],[8,"Zero","","This trait is necessary so that we can define zero for…",null,null],[10,"zero","","",8,[[]]],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",9,null],[12,"im","","Imaginary portion of the complex number",9,null],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",10,[[]]],[10,"infinity","","Returns the infinite value.",10,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",10,[[]]],[10,"neg_zero","","Returns `-0.0`.",10,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",10,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",10,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",10,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",10,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",10,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",10,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",10,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",10,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",10,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",10,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",10,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",10,[[]]],[10,"trunc","","Return the integer part of a number.",10,[[]]],[10,"fract","","Returns the fractional part of a number.",10,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",10,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",10,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",10,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",10,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",10,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",10,[[]]],[10,"powi","","Raise a number to an integer power.",10,[[]]],[10,"powf","","Raise a number to a floating point power.",10,[[]]],[10,"sqrt","","Take the square root of a number.",10,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",10,[[]]],[10,"exp2","","Returns `2^(self)`.",10,[[]]],[10,"ln","","Returns the natural logarithm of the number.",10,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",10,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",10,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",10,[[]]],[11,"to_degrees","","Converts radians to degrees.",10,[[]]],[11,"to_radians","","Converts degrees to radians.",10,[[]]],[10,"max","","Returns the maximum of the two numbers.",10,[[]]],[10,"min","","Returns the minimum of the two numbers.",10,[[]]],[10,"abs_sub","","The positive difference of two numbers.",10,[[]]],[10,"cbrt","","Take the cubic root of a number.",10,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",10,[[]]],[10,"sin","","Computes the sine of a number (in radians).",10,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",10,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",10,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",10,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",10,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",10,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",10,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",10,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",10,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",10,[[]]],[10,"sinh","","Hyperbolic sine function.",10,[[]]],[10,"cosh","","Hyperbolic cosine function.",10,[[]]],[10,"tanh","","Hyperbolic tangent function.",10,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",10,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",10,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",10,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",10,[[]]],[8,"Num","","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",11,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",11,[[],["result",4]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",12,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",12,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",12,[[]]],[5,"print_calibration","basic_dsp","Prints debug information about the calibration. The…",null,[[],["string",3]]],[3,"MultiCoreSettings","","Holds parameters which specify how multiple cores are used…",null,null],[12,"core_limit","","All operations will be limited to not create more threads…",13,null],[12,"med_dual_core_threshold","","",13,null],[12,"med_multi_core_threshold","","",13,null],[12,"large_dual_core_threshold","","",13,null],[12,"large_multi_core_threshold","","",13,null],[3,"FixedLenBuffer","","A buffer which gets initalized with a data storage type…",null,null],[6,"TransRes","","Result for operations which transform a type (most…",null,null],[6,"VoidResult","","Void/nothing in case of success or a reason in case of an…",null,null],[6,"ScalarResult","","Scalar result or a reason in case of an error.",null,null],[8,"NumberSpace","","Number space (real or complex) information.",null,null],[10,"is_complex","","",14,[[]]],[10,"to_complex","","For implementations which track meta data at runtime this…",14,[[]]],[10,"to_real","","See `to_complex` for more details.",14,[[]]],[8,"Domain","","Domain (time or frequency) information.",null,null],[10,"domain","","",15,[[],["datadomain",4]]],[10,"to_freq","","See `to_complex` for some details.",15,[[]]],[10,"to_time","","See `to_complex` for some details.",15,[[]]],[8,"RealNumberSpace","","Trait for types containing real data.",null,null],[8,"ComplexNumberSpace","","Trait for types containing complex data.",null,null],[8,"TimeDomain","","Trait for types containing time domain data.",null,null],[8,"FrequencyDomain","","Trait for types containing frequency domain data.",null,null],[8,"PosEq","","Expresses at compile time that two classes could…",null,null],[3,"DspVec","","A 1xN (one times N elements) or Nx1 data vector as used…",null,null],[12,"data","","The underlying storage. `self.len()` should be called to…",16,null],[3,"NoTradeBufferBurrow","","Buffer borrow type for `NoTradeBufferBurrow`.",null,null],[8,"ToSlice","","A trait to convert a type into a slice.",null,null],[10,"to_slice","","Convert to a slice.",17,[[]]],[10,"len","","Length of a slice.",17,[[]]],[10,"is_empty","","Indicates whether or not this storage type is empty.",17,[[]]],[10,"alloc_len","","Gets the allocated length of a storage. It\'s expected that…",17,[[]]],[10,"try_resize","","Resizes the storage to support at least `len` elements or…",17,[[],[["result",4],["errorreason",4]]]],[8,"ToSliceMut","","A trait to convert a type into a mutable slice.",null,null],[10,"to_slice_mut","","Convert to a mutable slice.",18,[[]]],[8,"Resize","","A trait for storage types which are known to have the…",null,null],[10,"resize","","Resize a storage type. Must work for any value of `len`,…",19,[[]]],[6,"ComplexFreqVec","","A vector with complex numbers in frequency domain.",null,null],[6,"ComplexTimeVec","","A vector with complex numbers in time domain.",null,null],[6,"GenDspVec","","A vector with no information about number space or domain…",null,null],[6,"RealFreqVec","","A vector with real numbers in frequency domain.",null,null],[6,"RealTimeVec","","A vector with real numbers in time domain.",null,null],[8,"ToDspVector","","Conversion from a generic data type into a dsp vector…",null,null],[10,"to_gen_dsp_vec","","Create a new generic vector. `delta` can be changed after…",20,[[["datadomain",4]],[["dspvec",3],["realorcomplex",3],["timeorfreq",3]]]],[10,"to_dsp_vec","","Create a new vector from the given meta data. The meta…",20,[[["typemetadata",3]],["dspvec",3]]],[8,"ToRealVector","","Conversion from a generic data type into a dsp vector with…",null,null],[10,"to_real_time_vec","","Create a new vector in real number space and time domain.…",21,[[],[["dspvec",3],["real",3],["time",3]]]],[10,"to_real_freq_vec","","Create a new vector in real number space and frequency…",21,[[],[["dspvec",3],["real",3],["freq",3]]]],[8,"ToComplexVector","","Conversion from a generic data type into a dsp vector with…",null,null],[10,"to_complex_time_vec","","Create a new vector in complex number space and time…",22,[[],[["dspvec",3],["complex",3],["time",3]]]],[10,"to_complex_freq_vec","","Create a new vector in complex number space and frequency…",22,[[],[["freq",3],["complex",3],["dspvec",3]]]],[8,"FromVectorFloat","","Retrieves the underlying storage from a vector. Returned…",null,null],[16,"Output","","Type of the underlying storage of a vector.",23,null],[10,"getf","","Gets the underlying storage and the number of elements…",23,[[]]],[8,"FromVector","","Retrieves the underlying storage from a vector.",null,null],[16,"Output","","Type of the underlying storage of a vector.",24,null],[10,"get","","Gets the underlying storage and the number of elements…",24,[[]]],[8,"Buffer","","A buffer which can be used by other types. Types will call…",null,null],[16,"Borrow","","The type of the burrow which is returned.",25,null],[10,"borrow","","Asks the buffer for new storage of exactly size `len`. The…",25,[[]]],[10,"alloc_len","","Returns the allocated length of all storage within this…",25,[[]]],[8,"BufferBorrow","","A \\\"slice-like\\\" type which also allows to",null,null],[10,"trade","","Moves the content of this slice into `storage`. This…",26,[[]]],[8,"MetaData","","A trait which provides information about number space and…",null,null],[10,"domain","","The domain in which the data vector resides. Basically…",27,[[],["datadomain",4]]],[10,"is_complex","","Indicates whether the vector contains complex data. This…",27,[[]]],[3,"FixedLenBufferBurrow","","Buffer borrow type for `SingleBuffer`.",null,null],[6,"RealTimeVecSlice32","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVecSlice32","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVecSlice32","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVecSlice32","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVecSlice32","","A vector with no information about number space or domain…",null,null],[6,"RealTimeVecSlice64","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVecSlice64","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVecSlice64","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVecSlice64","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVecSlice64","","A vector with no information about number space or domain…",null,null],[8,"InterleaveToVector","","Conversion from two instances of a generic data type into…",null,null],[10,"interleave_to_complex_time_vec","","Create a new vector in real number space and time domain.…",28,[[],[["dspvec",3],["errorreason",4],["result",4]]]],[10,"interleave_to_complex_freq_vec","","Create a new vector in real number space and frequency…",28,[[],[["result",4],["dspvec",3],["errorreason",4]]]],[3,"SingleBufferBurrow","","Buffer borrow type for `SingleBuffer`.",null,null],[3,"NoBuffer","","This type can be used everytime the API asks for a buffer…",null,null],[3,"NoBufferBurrow","","Buffer borrow type for `NoBuffer`.",null,null],[6,"RealTimeVec32","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVec32","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVec32","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVec32","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVec32","","A vector with no information about number space or domain…",null,null],[6,"RealTimeVec64","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVec64","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVec64","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVec64","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVec64","","A vector with no information about number space or domain…",null,null],[8,"ToDspVectorPar","","Conversion from a generic data type into a dsp vector…",null,null],[10,"to_gen_dsp_vec_par","","Create a new generic vector. `delta` can be changed after…",29,[[["datadomain",4]],[["dspvec",3],["realorcomplex",3],["timeorfreq",3]]]],[10,"to_dsp_vec_par","","Create a new vector from the given meta data. The meta…",29,[[["typemetadata",3]],["dspvec",3]]],[8,"ToRealVectorPar","","Conversion from a generic data type into a dsp vector with…",null,null],[10,"to_real_time_vec_par","","Create a new vector in real number space and time domain.…",30,[[],[["dspvec",3],["real",3],["time",3]]]],[10,"to_real_freq_vec_par","","Create a new vector in real number space and frequency…",30,[[],[["dspvec",3],["real",3],["freq",3]]]],[8,"ToComplexVectorPar","","Conversion from a generic data type into a dsp vector with…",null,null],[10,"to_complex_time_vec_par","","Create a new vector in complex number space and time…",31,[[],[["dspvec",3],["complex",3],["time",3]]]],[10,"to_complex_freq_vec_par","","Create a new vector in complex number space and frequency…",31,[[],[["freq",3],["complex",3],["dspvec",3]]]],[8,"FloatIndex","","Like `std::ops::Index` but with a different method name so…",null,null],[16,"Output","","",32,null],[10,"data","","The method for float indexing. If the vector is real…",32,[[]]],[8,"FloatIndexMut","","Like `std::ops::IndexMut` but with a different method name…",null,null],[10,"data_mut","","The method for real indexing",33,[[]]],[8,"ComplexIndex","","Like `std::ops::Index` but with a different method name so…",null,null],[16,"Output","","",34,null],[10,"datac","","The method for complex indexing",34,[[]]],[8,"ComplexIndexMut","","Like `std::ops::IndexMut` but with a different method name…",null,null],[10,"datac_mut","","The method for complex indexing",35,[[]]],[8,"ResizeOps","","Operations to resize a data type.",null,null],[10,"resize","","Changes `self.len()`. If `self.is_complex()` is true then…",36,[[],[["result",4],["errorreason",4]]]],[8,"ResizeBufferedOps","","Operations to resize a data type.",null,null],[10,"resize_b","","Changes `self.len()`. If `self.is_complex()` is true then…",37,[[],[["result",4],["errorreason",4]]]],[8,"Vector","","A trait for vector types.",null,null],[10,"delta","","The x-axis delta. If `domain` is time domain then `delta`…",38,[[]]],[10,"set_delta","","Sets the x-axis delta. If `domain` is time domain then…",38,[[]]],[10,"len","","The number of valid elements in the vector. This can be…",38,[[]]],[10,"is_empty","","Indicates whether or not the vector is empty.",38,[[]]],[10,"points","","The number of valid points. If the vector is complex then…",38,[[]]],[10,"get_multicore_settings","","Gets the multi core settings which determine how the work…",38,[[],["multicoresettings",3]]],[10,"set_multicore_settings","","Sets the multi core settings which determine how the work…",38,[[["multicoresettings",3]]]],[10,"alloc_len","","Gets the number of allocated elements in the underlying…",38,[[]]],[8,"GetMetaData","","Gets the meta data of a type. This can be used to create a…",null,null],[10,"get_meta_data","","Gets a copy of the vector meta data. This can be used to…",39,[[],["typemetadata",3]]],[8,"RededicateForceOps","","This trait allows to change a data type and performs the…",null,null],[10,"rededicate_from_force","","Make `Other` a `Self` without performing any checks.",40,[[]]],[10,"rededicate_with_runtime_data","","Make `Other` a `Self` without performing any checks.",40,[[["datadomain",4]]]],[8,"ToRealResult","","Specifies what the the result is if a type is transformed…",null,null],[16,"RealResult","","",41,null],[8,"ComplexToRealTransformsOps","","Defines transformations from complex to real number space.",null,null],[10,"magnitude","","Gets the absolute value, magnitude or norm of all vector…",42,[[]]],[10,"magnitude_squared","","Gets the square root of the absolute value of all vector…",42,[[]]],[10,"to_real","","Gets all real elements.",42,[[]]],[10,"to_imag","","Gets all imag elements.",42,[[]]],[10,"phase","","Gets the phase of all elements in [rad].",42,[[]]],[8,"ComplexToRealTransformsOpsBuffered","","Defines transformations from complex to real number space.",null,null],[10,"magnitude_b","","Gets the absolute value, magnitude or norm of all vector…",43,[[]]],[10,"magnitude_squared_b","","Gets the square root of the absolute value of all vector…",43,[[]]],[10,"to_real_b","","Gets all real elements.",43,[[]]],[10,"to_imag_b","","Gets all imag elements.",43,[[]]],[10,"phase_b","","Gets the phase of all elements in [rad].",43,[[]]],[8,"ComplexToRealGetterOps","","Defines getters to get real data from complex types.",null,null],[10,"get_real","","Copies all real elements into the given vector.",44,[[]]],[10,"get_imag","","Copies all imag elements into the given vector.",44,[[]]],[10,"get_magnitude","","Copies the absolute value or magnitude of all vector…",44,[[]]],[10,"get_magnitude_squared","","Copies the absolute value squared or magnitude squared of…",44,[[]]],[10,"get_phase","","Copies the phase of all elements in [rad] into the given…",44,[[]]],[10,"get_real_imag","","Gets the real and imaginary parts and stores them in the…",44,[[]]],[10,"get_mag_phase","","Gets the magnitude and phase and stores them in the given…",44,[[]]],[8,"ComplexToRealSetterOps","","Defines setters to create complex data from real data.",null,null],[10,"set_real_imag","","Overrides the `self` vectors data with the real and…",45,[[],[["result",4],["errorreason",4]]]],[10,"set_mag_phase","","Overrides the `self` vectors data with the magnitude and…",45,[[],[["result",4],["errorreason",4]]]],[8,"ComplexOps","","Operations on complex types.",null,null],[10,"multiply_complex_exponential","","Multiplies each vector element with…",46,[[]]],[10,"conj","","Calculates the complex conjugate of the vector.",46,[[]]],[8,"InsertZerosOps","","A trait to insert zeros into the data at some specified…",null,null],[10,"zero_pad","","Appends zeros add the end of the vector until the vector…",47,[[["paddingoption",4]],[["result",4],["errorreason",4]]]],[10,"zero_interleave","","Interleaves zeros `factor - 1`times after every vector…",47,[[],[["result",4],["errorreason",4]]]],[8,"InsertZerosOpsBuffered","","A trait to insert zeros into the data at some specified…",null,null],[10,"zero_pad_b","","Appends zeros add the end of the vector until the vector…",48,[[["paddingoption",4]],[["result",4],["errorreason",4]]]],[10,"zero_interleave_b","","Interleaves zeros `factor - 1`times after every vector…",48,[[]]],[8,"ToComplexResult","","Specifies what the the result is if a type is transformed…",null,null],[16,"ComplexResult","","",49,null],[8,"RealToComplexTransformsOps","","Defines transformations from real to complex number space.",null,null],[10,"to_complex","","Converts the real vector into a complex vector.",50,[[],["result",4]]],[8,"RealToComplexTransformsOpsBuffered","","Defines transformations from real to complex number space.",null,null],[10,"to_complex_b","","Converts the real vector into a complex vector. The buffer…",51,[[]]],[8,"RealOps","","Operations on real types.",null,null],[10,"abs","","Gets the absolute value of all vector elements.",52,[[]]],[8,"ModuloOps","","Operations on real types.",null,null],[10,"wrap","","Each value in the vector is dividable by the divisor and…",53,[[]]],[10,"unwrap","","This function corrects the jumps in the given vector which…",53,[[]]],[8,"ApproximatedOps","","Recommended to be only used with the CPU feature flags…",null,null],[10,"ln_approx","","Computes the principal value approximation of natural…",54,[[]]],[10,"exp_approx","","Calculates the natural exponential approximation for every…",54,[[]]],[10,"sin_approx","","Calculates the sine approximation of each element in…",54,[[]]],[10,"cos_approx","","Calculates the cosine approximation of each element in…",54,[[]]],[10,"log_approx","","Calculates the approximated logarithm to the given base…",54,[[]]],[10,"expf_approx","","Calculates the approximated exponential to the given base…",54,[[]]],[10,"powf_approx","","Raises every vector element to approximately a floating…",54,[[]]],[8,"ToTimeResult","","Specifies what the the result is if a type is transformed…",null,null],[16,"TimeResult","","Specifies what the the result is if a type is transformed…",55,null],[8,"ToFreqResult","","Specifies what the the result is if a type is transformed…",null,null],[16,"FreqResult","","",56,null],[8,"FrequencyDomainOperations","","Defines all operations which are valid on `DataVecs`…",null,null],[10,"mirror","","This function mirrors the spectrum vector to transform a…",57,[[]]],[10,"fft_shift","","Swaps vector halves after a Fourier Transformation.",57,[[]]],[10,"ifft_shift","","Swaps vector halves before an Inverse Fourier…",57,[[]]],[8,"TimeDomainOperations","","Defines all operations which are valid on `DataVecs`…",null,null],[10,"apply_window","","Applies a window to the data vector.",58,[[["windowfunction",8]]]],[10,"unapply_window","","Removes a window from the data vector.",58,[[["windowfunction",8]]]],[8,"ScaleOps","","An operation which multiplies each vector element with a…",null,null],[10,"scale","","Multiplies the vector element with a scalar.",59,[[]]],[8,"ToRealTimeResult","","Specifies what the the result is if a type is transformed…",null,null],[16,"RealTimeResult","","",60,null],[8,"ElementaryOps","","Elementary algebra on types: addition, subtraction,…",null,null],[10,"add","","Calculates the sum of `self + summand`. It consumes self…",61,[[],[["result",4],["errorreason",4]]]],[10,"sub","","Calculates the difference of `self - subtrahend`. It…",61,[[],[["result",4],["errorreason",4]]]],[10,"mul","","Calculates the product of `self * factor`. It consumes…",61,[[],[["result",4],["errorreason",4]]]],[10,"div","","Calculates the quotient of `self / summand`. It consumes…",61,[[],[["result",4],["errorreason",4]]]],[8,"FrequencyToTimeDomainOperations","","Defines all operations which are valid on `DataVecs`…",null,null],[10,"plain_ifft","","Performs an Inverse Fast Fourier Transformation…",62,[[]]],[10,"ifft","","Performs an Inverse Fast Fourier Transformation…",62,[[]]],[10,"windowed_ifft","","Performs an Inverse Fast Fourier Transformation…",62,[[["windowfunction",8]]]],[8,"ReorganizeDataOps","","This trait allows to reorganize the data by changing…",null,null],[10,"reverse","","Reverses the data inside the vector.",63,[[]]],[10,"swap_halves","","This function swaps both halves of the vector. This…",63,[[]]],[8,"TimeToFrequencyDomainOperations","","Defines all operations which are valid on `DataVecs`…",null,null],[10,"plain_fft","","Performs a Fast Fourier Transformation transforming a time…",64,[[]]],[10,"fft","","Performs a Fast Fourier Transformation transforming a time…",64,[[]]],[10,"windowed_fft","","Applies a FFT window and performs a Fast Fourier…",64,[[["windowfunction",8]]]],[8,"SymmetricTimeToFrequencyDomainOperations","","Defines all operations which are valid on `DataVecs`…",null,null],[10,"plain_sfft","","Performs a Symmetric Fast Fourier Transformation under the…",65,[[],["result",4]]],[10,"sfft","","Performs a Symmetric Fast Fourier Transformation under the…",65,[[],["result",4]]],[10,"windowed_sfft","","Performs a Symmetric Fast Fourier Transformation under the…",65,[[["windowfunction",8]],["result",4]]],[8,"SymmetricFrequencyToTimeDomainOperations","","Defines all operations which are valid on `DataVecs`…",null,null],[10,"plain_sifft","","Performs a Symmetric Inverse Fast Fourier Transformation…",66,[[],["result",4]]],[10,"sifft","","Performs a Symmetric Inverse Fast Fourier Transformation…",66,[[],["result",4]]],[10,"windowed_sifft","","Performs a Symmetric Inverse Fast Fourier Transformation…",66,[[["windowfunction",8]],["result",4]]],[8,"CrossCorrelationArgumentOps","","This trait allows to transform an argument so that it can…",null,null],[10,"prepare_argument","","Prepares an argument to be used for convolution. Preparing…",67,[[]]],[10,"prepare_argument_padded","","Prepares an argument to be used for convolution. The…",67,[[]]],[8,"CrossCorrelationOps","","Cross-correlation of data vectors. See also…",null,null],[10,"correlate","","Calculates the correlation between `self` and `other`.…",68,[[],[["result",4],["errorreason",4]]]],[8,"Convolution","","Provides a convolution operations.",null,null],[10,"convolve","","Convolves `self` with the convolution function…",69,[[]]],[8,"ConvolutionOps","","Provides a convolution operation for types which at some…",null,null],[10,"convolve_signal","","Convolves `self` with the convolution function…",70,[[],[["result",4],["errorreason",4]]]],[8,"FrequencyMultiplication","","Provides a frequency response multiplication operations.",null,null],[10,"multiply_frequency_response","","Multiplies `self` with the frequency response function…",71,[[]]],[8,"InterpolationOps","","Provides interpolation operations for real and complex…",null,null],[10,"interpolatef","","Interpolates `self` with the convolution function…",72,[[["realimpulseresponse",8]]]],[10,"interpolatei","","Interpolates `self` with the convolution function…",72,[[["realfrequencyresponse",8]],[["result",4],["errorreason",4]]]],[10,"interpolate","","Interpolates the signal in frequency domain by padding it…",72,[[["realfrequencyresponse",8],["option",4]],[["result",4],["errorreason",4]]]],[10,"interpft","","Interpolates the signal in frequency domain by padding it…",72,[[]]],[10,"decimatei","","Decimates or downsamples `self`. `decimatei` is the…",72,[[]]],[8,"RealInterpolationOps","","Provides interpolation operations which are only…",null,null],[10,"interpolate_hermite","","Piecewise cubic hermite interpolation between samples.",73,[[]]],[10,"interpolate_lin","","Linear interpolation between samples.",73,[[]]],[8,"RededicateOps","","This trait allows to change a data type. The operations…",null,null],[10,"rededicate_from","","Make `Other` a `Self`.",74,[[]]],[8,"RededicateToOps","","This trait allows to change a data type. The operations…",null,null],[10,"rededicate","","Converts `Self` inot `Other`.",75,[[]]],[8,"Stats","","Operations on statistics.",null,null],[10,"empty","","Creates an empty statistics struct.",76,[[]]],[10,"empty_vec","","Creates a vector of empty statistics structs.",76,[[],["arrayvec",3]]],[10,"invalid","","Creates a statistics struct which resembles an invalid…",76,[[]]],[10,"merge","","Merges several statistics into one.",76,[[]]],[10,"merge_cols","","Merges several vectors of statistics into one vector.",76,[[],["arrayvec",3]]],[10,"add","","Adds a new value to the statistics, all statistic fields…",76,[[]]],[6,"StatsVec","","Alias for a vector of any statistical information.",null,null],[17,"STATS_VEC_CAPACTIY","","The maximum `len` for any of the `*split` methods.",null,null],[8,"OffsetOps","","An operation which adds a constant to each vector element",null,null],[10,"offset","","Adds a scalar to each vector element.",77,[[]]],[8,"ElementaryWrapAroundOps","","Elementary algebra on types where the argument might…",null,null],[10,"add_smaller","","Calculates the sum of `self + summand`. `summand` may be…",78,[[],[["result",4],["errorreason",4]]]],[10,"sub_smaller","","Calculates the sum of `self - subtrahend`. `subtrahend`…",78,[[],[["result",4],["errorreason",4]]]],[10,"mul_smaller","","Calculates the sum of `self - factor`. `factor` may be…",78,[[],[["result",4],["errorreason",4]]]],[10,"div_smaller","","Calculates the sum of `self - divisor`. `divisor` may be…",78,[[],[["result",4],["errorreason",4]]]],[8,"TrigOps","","Trigonometry methods.",null,null],[10,"sin","","Calculates the sine of each element in radians.",79,[[]]],[10,"cos","","Calculates the cosine of each element in radians.",79,[[]]],[10,"tan","","Calculates the tangent of each element in radians.",79,[[]]],[10,"asin","","Calculates the principal value of the inverse sine of each…",79,[[]]],[10,"acos","","Calculates the principal value of the inverse cosine of…",79,[[]]],[10,"atan","","Calculates the principal value of the inverse tangent of…",79,[[]]],[10,"sinh","","Calculates the hyperbolic sine each element in radians.",79,[[]]],[10,"cosh","","Calculates the hyperbolic cosine each element in radians.",79,[[]]],[10,"tanh","","Calculates the hyperbolic tangent each element in radians.",79,[[]]],[10,"asinh","","Calculates the principal value of the inverse hyperbolic…",79,[[]]],[10,"acosh","","Calculates the principal value of the inverse hyperbolic…",79,[[]]],[10,"atanh","","Calculates the principal value of the inverse hyperbolic…",79,[[]]],[8,"PowerOps","","Roots, powers, exponentials and logarithms.",null,null],[10,"sqrt","","Gets the square root of all vector elements.",80,[[]]],[10,"square","","Squares all vector elements.",80,[[]]],[10,"root","","Calculates the n-th root of every vector element.",80,[[]]],[10,"powf","","Raises every vector element to a floating point power.",80,[[]]],[10,"ln","","Computes the principal value of natural logarithm of every…",80,[[]]],[10,"exp","","Calculates the natural exponential for every vector element.",80,[[]]],[10,"log","","Calculates the logarithm to the given base for every…",80,[[]]],[10,"expf","","Calculates the exponential to the given base for every…",80,[[]]],[8,"SplitOps","","Splits the data into several smaller pieces of equal size.",null,null],[10,"split_into","","Splits the vector into several smaller vectors.…",81,[[],[["result",4],["errorreason",4]]]],[8,"MergeOps","","Merges several pieces of equal size into one data chunk.",null,null],[10,"merge","","Merges several vectors into `self`. All vectors must have…",82,[[],[["result",4],["errorreason",4]]]],[8,"DiffSumOps","","A trait to calculate the diff (1st derivative in a…",null,null],[10,"diff","","Calculates the delta of each elements to its previous…",83,[[]]],[10,"diff_with_start","","Calculates the delta of each elements to its previous…",83,[[]]],[10,"cum_sum","","Calculates the cumulative sum of all elements. This…",83,[[]]],[8,"DotProductOps","","An operation which multiplies each vector element with a…",null,null],[16,"Output","","",84,null],[10,"dot_product","","Calculates the dot product of self and factor. Self and…",84,[[]]],[8,"PreciseDotProductOps","","An operation which multiplies each vector element with a…",null,null],[16,"Output","","",85,null],[10,"dot_product_prec","","Calculates the dot product of self and factor using a more…",85,[[]]],[8,"MapInplaceOps","","Operations which allow to iterate over the vector and to…",null,null],[10,"map_inplace","","Transforms all vector elements using the function `map`.",86,[[]]],[8,"MapAggregateOps","","Operations which allow to iterate over the vector and to…",null,null],[16,"Output","","",87,null],[10,"map_aggregate","","Transforms all vector elements using the function `map`…",87,[[]]],[8,"StatisticsOps","","This trait offers operations to calculate statistics about…",null,null],[16,"Result","","",88,null],[10,"statistics","","Calculates the statistics of the data.",88,[[]]],[8,"StatisticsSplitOps","","This trait offers operations to calculate statistics about…",null,null],[16,"Result","","",89,null],[10,"statistics_split","","Calculates the statistics of the data contained in the…",89,[[],[["result",4],["errorreason",4]]]],[8,"SumOps","","Offers operations to calculate the sum or the sum of…",null,null],[10,"sum","","Calculates the sum of the data contained in the vector.",90,[[]]],[10,"sum_sq","","Calculates the sum of the squared data contained in the…",90,[[]]],[8,"PreciseStatisticsOps","","Offers the same functionality as the `StatisticsOps` trait…",null,null],[16,"Result","","",91,null],[10,"statistics_prec","","Calculates the statistics of the data contained in the…",91,[[]]],[8,"PreciseStatisticsSplitOps","","Offers the same functionality as the `StatisticsOps` trait…",null,null],[16,"Result","","",92,null],[10,"statistics_split_prec","","Calculates the statistics of the data contained in the…",92,[[],[["result",4],["errorreason",4]]]],[8,"PreciseSumOps","","Offers the same functionality as the `SumOps` trait but…",null,null],[10,"sum_prec","","Calculates the sum of the data contained in the vector…",93,[[]]],[10,"sum_sq_prec","","Calculates the sum of the squared data contained in the…",93,[[]]],[8,"PreciseStats","","A trait for statistics which allows to add new values in a…",null,null],[10,"add_prec","","Adds a new values to the statistics using the Kahan…",94,[[]]],[4,"ErrorReason","","Enumeration of all error reasons",null,null],[13,"InputMustHaveTheSameSize","","The operations requires all inputs to have the same size,…",95,null],[13,"InputMetaDataMustAgree","","The operations requires all inputs to have the same meta…",95,null],[13,"InputMustBeComplex","","The operation requires the input to be complex.",95,null],[13,"InputMustBeReal","","The operation requires the input to be real.",95,null],[13,"InputMustBeInTimeDomain","","The operation requires the input to be in time domain.",95,null],[13,"InputMustBeInFrequencyDomain","","The operation requires the input to be in frequency domain.",95,null],[13,"InvalidArgumentLength","","The arguments have an invalid length to perform the…",95,null],[13,"InputMustBeConjSymmetric","","The operations is only valid if the data input contains…",95,null],[13,"InputMustHaveAnOddLength","","`self.points()` must be an odd number.",95,null],[13,"ArgumentFunctionMustBeSymmetric","","The function passed as argument must be symmetric",95,null],[13,"InvalidNumberOfArgumentsForCombinedOp","","The number of arguments passed into a combined operation…",95,null],[13,"InputMustNotBeEmpty","","The operation isn\'t specified for an empty vector.",95,null],[13,"InputMustHaveAnEvenLength","","Given input must have an even length.",95,null],[13,"TypeCanNotResize","","The arguments would require that the type allocates larger…",95,null],[3,"SingleBuffer","","A buffer which stores a single vector and never shrinks.",null,null],[4,"PaddingOption","","An option which defines how a vector should be padded",null,null],[13,"End","","Appends zeros to the end of the vector.",96,null],[13,"Surround","","Surrounds the vector with zeros at the beginning and at…",96,null],[13,"Center","","Inserts zeros in the center of the vector",96,null],[3,"Statistics","","Statistics about numeric data",null,null],[12,"sum","","Sum of all values",97,null],[12,"count","","How many numbers have been considered for the stats",97,null],[12,"average","","Average value",97,null],[12,"rms","","Root-mean-square or rms over all values.",97,null],[12,"min","","The smallest value.",97,null],[12,"min_index","","The index of the smallest value.",97,null],[12,"max","","The largest value.",97,null],[12,"max_index","","The index of the largest value.",97,null],[4,"DataDomain","","The domain of a data vector",null,null],[13,"Time","","Time domain, the x-axis is in [s].",98,null],[13,"Frequency","","Frequency domain, the x-axis is in [Hz].",98,null],[3,"TypeMetaData","","Holds meta data about a type.",null,null],[0,"matrix","","",null,null],[3,"MatrixMxN","basic_dsp::matrix","A matrix which can hold 1 to N vectors.",null,null],[3,"Matrix2xN","","A matrix which can hold exactly 2 vectors.",null,null],[3,"Matrix3xN","","A matrix which can hold exactly 3 vectors.",null,null],[3,"Matrix4xN","","A matrix which can hold exactly 4 vectors.",null,null],[6,"Matrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating…",null,null],[6,"Matrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating…",null,null],[6,"RealTimeMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating…",null,null],[6,"RealTimeMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating…",null,null],[6,"ComplexTimeMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating…",null,null],[6,"ComplexTimeMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating…",null,null],[6,"RealFreqMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating…",null,null],[6,"RealFreqMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating…",null,null],[6,"ComplexFreqMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating…",null,null],[6,"ComplexFreqMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating…",null,null],[6,"Matrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit…",null,null],[6,"Matrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit…",null,null],[6,"RealTimeMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit…",null,null],[6,"RealTimeMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit…",null,null],[6,"ComplexTimeMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit…",null,null],[6,"ComplexTimeMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit…",null,null],[6,"RealFreqMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit…",null,null],[6,"RealFreqMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit…",null,null],[6,"ComplexFreqMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit…",null,null],[6,"ComplexFreqMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit…",null,null],[6,"Matrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit…",null,null],[6,"Matrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit…",null,null],[6,"RealTimeMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit…",null,null],[6,"RealTimeMatrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit…",null,null],[6,"ComplexTimeMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit…",null,null],[6,"ComplexTimeMatrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit…",null,null],[6,"RealFreqMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit…",null,null],[6,"RealFreqMatrix64x3","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[6,"ComplexFreqMatrix32x3","","A matrix which can hold exactly 4 vectors of 32 bit…",null,null],[6,"ComplexFreqMatrix64x3","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[6,"Matrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit…",null,null],[6,"Matrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[6,"RealTimeMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit…",null,null],[6,"RealTimeMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[6,"ComplexTimeMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit…",null,null],[6,"ComplexTimeMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[6,"RealFreqMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit…",null,null],[6,"RealFreqMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[6,"ComplexFreqMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit…",null,null],[6,"ComplexFreqMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[8,"Matrix","","A trait for matrix types. In this lib a matrix is simply a…",null,null],[10,"delta","","The x-axis delta. If `domain` is time domain then `delta`…",99,[[]]],[10,"set_delta","","Sets the x-axis delta. If `domain` is time domain then…",99,[[]]],[10,"row_len","","The number of valid elements in each row of the matrix.…",99,[[]]],[10,"row_points","","The number of valid points in a row. If the matrix is…",99,[[]]],[10,"col_len","","The number of columns in the matrix.",99,[[]]],[10,"rows","","Gets the rows as vectors.",99,[[]]],[10,"rows_mut","","Gets the rows as mutable vectors.",99,[[]]],[8,"ToMatrix","","Conversion from a collection of vectors to a matrix.",null,null],[16,"Output","","",100,null],[10,"to_mat","","Create a new matrix from a collection of vectors.",100,[[]]],[8,"ToDspMatrix","","Conversion from a generic data type into a dsp matrix…",null,null],[16,"Output","","",101,null],[10,"to_gen_dsp_mat","","Create a new generic matrix. `delta` can be changed after…",101,[[["datadomain",4]]]],[8,"ToRealTimeMatrix","","Conversion from a generic data type into a dsp matrix with…",null,null],[16,"Output","","",102,null],[10,"to_real_time_mat","","Create a new matrix in real number space and time domain.…",102,[[]]],[8,"ToRealFreqMatrix","","Conversion from a generic data type into a dsp matrix with…",null,null],[16,"Output","","",103,null],[10,"to_real_freq_mat","","Create a new vector in real number space and frequency…",103,[[]]],[8,"ToComplexTimeMatrix","","Conversion from a generic data type into a dsp vector with…",null,null],[16,"Output","","",104,null],[10,"to_complex_time_mat","","Create a new matrix in complex number space and time…",104,[[]]],[8,"ToComplexFreqMatrix","","Conversion from a generic data type into a dsp vector with…",null,null],[16,"Output","","",105,null],[10,"to_complex_freq_mat","","Create a new matrix in complex number space and frequency…",105,[[]]],[8,"FromMatrix","","Retrieves the underlying storage from a matrix.",null,null],[16,"Output","","Type of the underlying storage of a matrix.",106,null],[10,"get","","Gets the underlying matrix and the number of elements…",106,[[]]],[11,"from","basic_dsp::conv_types","",107,[[]]],[11,"into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","basic_dsp::meta","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","basic_dsp::window_functions","",117,[[]]],[11,"into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"from","basic_dsp::numbers","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"zero","","",9,[[]]],[11,"from","basic_dsp","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"from","basic_dsp::matrix","",129,[[]]],[11,"into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"prepare_argument","","",131,[[]]],[11,"prepare_argument_padded","","",131,[[]]],[11,"prepare_argument","","",132,[[]]],[11,"prepare_argument_padded","","",132,[[]]],[11,"prepare_argument","","",129,[[]]],[11,"prepare_argument_padded","","",129,[[]]],[11,"prepare_argument","","",130,[[]]],[11,"prepare_argument_padded","","",130,[[]]],[11,"add","","",131,[[],[["result",4],["errorreason",4]]]],[11,"sub","","",131,[[],[["result",4],["errorreason",4]]]],[11,"div","","",131,[[],[["result",4],["errorreason",4]]]],[11,"mul","","",131,[[],[["result",4],["errorreason",4]]]],[11,"add","","",129,[[["matrixmxn",3]],[["result",4],["errorreason",4]]]],[11,"sub","","",129,[[["matrixmxn",3]],[["result",4],["errorreason",4]]]],[11,"div","","",129,[[["matrixmxn",3]],[["result",4],["errorreason",4]]]],[11,"mul","","",129,[[["matrixmxn",3]],[["result",4],["errorreason",4]]]],[11,"add","","",132,[[],[["result",4],["errorreason",4]]]],[11,"sub","","",132,[[],[["result",4],["errorreason",4]]]],[11,"div","","",132,[[],[["result",4],["errorreason",4]]]],[11,"mul","","",132,[[],[["result",4],["errorreason",4]]]],[11,"add","","",131,[[["matrix3xn",3]],[["result",4],["errorreason",4]]]],[11,"sub","","",131,[[["matrix3xn",3]],[["result",4],["errorreason",4]]]],[11,"div","","",131,[[["matrix3xn",3]],[["result",4],["errorreason",4]]]],[11,"mul","","",131,[[["matrix3xn",3]],[["result",4],["errorreason",4]]]],[11,"add","","",130,[[["matrix2xn",3]],[["result",4],["errorreason",4]]]],[11,"sub","","",130,[[["matrix2xn",3]],[["result",4],["errorreason",4]]]],[11,"div","","",130,[[["matrix2xn",3]],[["result",4],["errorreason",4]]]],[11,"mul","","",130,[[["matrix2xn",3]],[["result",4],["errorreason",4]]]],[11,"add","","",132,[[["matrix4xn",3]],[["result",4],["errorreason",4]]]],[11,"sub","","",132,[[["matrix4xn",3]],[["result",4],["errorreason",4]]]],[11,"div","","",132,[[["matrix4xn",3]],[["result",4],["errorreason",4]]]],[11,"mul","","",132,[[["matrix4xn",3]],[["result",4],["errorreason",4]]]],[11,"add","","",129,[[],[["result",4],["errorreason",4]]]],[11,"sub","","",129,[[],[["result",4],["errorreason",4]]]],[11,"div","","",129,[[],[["result",4],["errorreason",4]]]],[11,"mul","","",129,[[],[["result",4],["errorreason",4]]]],[11,"add","","",130,[[],[["result",4],["errorreason",4]]]],[11,"sub","","",130,[[],[["result",4],["errorreason",4]]]],[11,"div","","",130,[[],[["result",4],["errorreason",4]]]],[11,"mul","","",130,[[],[["result",4],["errorreason",4]]]],[11,"domain","","",131,[[],["datadomain",4]]],[11,"is_complex","","",131,[[]]],[11,"domain","","",132,[[],["datadomain",4]]],[11,"is_complex","","",132,[[]]],[11,"domain","","",130,[[],["datadomain",4]]],[11,"is_complex","","",130,[[]]],[11,"domain","","",129,[[],["datadomain",4]]],[11,"is_complex","","",129,[[]]],[11,"multiply_frequency_response","","",132,[[["realfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",131,[[["realfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",130,[[["realfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",129,[[["realfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",129,[[["complexfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",132,[[["complexfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",130,[[["complexfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",131,[[["complexfrequencyresponse",8]]]],[11,"sqrt","","",132,[[]]],[11,"square","","",132,[[]]],[11,"root","","",132,[[]]],[11,"powf","","",132,[[]]],[11,"ln","","",132,[[]]],[11,"exp","","",132,[[]]],[11,"log","","",132,[[]]],[11,"expf","","",132,[[]]],[11,"sqrt","","",131,[[]]],[11,"square","","",131,[[]]],[11,"root","","",131,[[]]],[11,"powf","","",131,[[]]],[11,"ln","","",131,[[]]],[11,"exp","","",131,[[]]],[11,"log","","",131,[[]]],[11,"expf","","",131,[[]]],[11,"sqrt","","",129,[[]]],[11,"square","","",129,[[]]],[11,"root","","",129,[[]]],[11,"powf","","",129,[[]]],[11,"ln","","",129,[[]]],[11,"exp","","",129,[[]]],[11,"log","","",129,[[]]],[11,"expf","","",129,[[]]],[11,"sqrt","","",130,[[]]],[11,"square","","",130,[[]]],[11,"root","","",130,[[]]],[11,"powf","","",130,[[]]],[11,"ln","","",130,[[]]],[11,"exp","","",130,[[]]],[11,"log","","",130,[[]]],[11,"expf","","",130,[[]]],[11,"map_inplace","","",132,[[]]],[11,"map_inplace","","",129,[[]]],[11,"map_inplace","","",131,[[]]],[11,"map_inplace","","",129,[[]]],[11,"map_inplace","","",130,[[]]],[11,"map_inplace","","",131,[[]]],[11,"map_inplace","","",132,[[]]],[11,"map_inplace","","",130,[[]]],[11,"sum_prec","","",132,[[]]],[11,"sum_sq_prec","","",132,[[]]],[11,"sum_prec","","",131,[[]]],[11,"sum_sq_prec","","",131,[[]]],[11,"sum_prec","","",130,[[]]],[11,"sum_sq_prec","","",130,[[]]],[11,"sum_prec","","",129,[[],["vec",3]]],[11,"sum_sq_prec","","",129,[[],["vec",3]]],[11,"set_real_imag","","",129,[[],[["result",4],["errorreason",4]]]],[11,"set_mag_phase","","",129,[[],[["result",4],["errorreason",4]]]],[11,"set_real_imag","","",131,[[],[["result",4],["errorreason",4]]]],[11,"set_mag_phase","","",131,[[],[["result",4],["errorreason",4]]]],[11,"set_real_imag","","",130,[[],[["result",4],["errorreason",4]]]],[11,"set_mag_phase","","",130,[[],[["result",4],["errorreason",4]]]],[11,"set_real_imag","","",132,[[],[["result",4],["errorreason",4]]]],[11,"set_mag_phase","","",132,[[],[["result",4],["errorreason",4]]]],[11,"statistics","","",129,[[],[["statistics",3],["vec",3]]]],[11,"statistics","","",131,[[]]],[11,"statistics","","",130,[[]]],[11,"statistics","","",132,[[]]],[11,"plain_sfft","","",129,[[],["result",4]]],[11,"sfft","","",129,[[],["result",4]]],[11,"windowed_sfft","","",129,[[["windowfunction",8]],["result",4]]],[11,"plain_sfft","","",131,[[],["result",4]]],[11,"sfft","","",131,[[],["result",4]]],[11,"windowed_sfft","","",131,[[["windowfunction",8]],["result",4]]],[11,"plain_sfft","","",130,[[],["result",4]]],[11,"sfft","","",130,[[],["result",4]]],[11,"windowed_sfft","","",130,[[["windowfunction",8]],["result",4]]],[11,"plain_sfft","","",132,[[],["result",4]]],[11,"sfft","","",132,[[],["result",4]]],[11,"windowed_sfft","","",132,[[["windowfunction",8]],["result",4]]],[11,"plain_fft","","",130,[[]]],[11,"fft","","",130,[[]]],[11,"windowed_fft","","",130,[[["windowfunction",8]]]],[11,"plain_fft","","",131,[[]]],[11,"fft","","",131,[[]]],[11,"windowed_fft","","",131,[[["windowfunction",8]]]],[11,"plain_fft","","",129,[[]]],[11,"fft","","",129,[[]]],[11,"windowed_fft","","",129,[[["windowfunction",8]]]],[11,"plain_fft","","",132,[[]]],[11,"fft","","",132,[[]]],[11,"windowed_fft","","",132,[[["windowfunction",8]]]],[11,"ln_approx","","",129,[[]]],[11,"exp_approx","","",129,[[]]],[11,"sin_approx","","",129,[[]]],[11,"cos_approx","","",129,[[]]],[11,"log_approx","","",129,[[]]],[11,"expf_approx","","",129,[[]]],[11,"powf_approx","","",129,[[]]],[11,"ln_approx","","",131,[[]]],[11,"exp_approx","","",131,[[]]],[11,"sin_approx","","",131,[[]]],[11,"cos_approx","","",131,[[]]],[11,"log_approx","","",131,[[]]],[11,"expf_approx","","",131,[[]]],[11,"powf_approx","","",131,[[]]],[11,"ln_approx","","",132,[[]]],[11,"exp_approx","","",132,[[]]],[11,"sin_approx","","",132,[[]]],[11,"cos_approx","","",132,[[]]],[11,"log_approx","","",132,[[]]],[11,"expf_approx","","",132,[[]]],[11,"powf_approx","","",132,[[]]],[11,"ln_approx","","",130,[[]]],[11,"exp_approx","","",130,[[]]],[11,"sin_approx","","",130,[[]]],[11,"cos_approx","","",130,[[]]],[11,"log_approx","","",130,[[]]],[11,"expf_approx","","",130,[[]]],[11,"powf_approx","","",130,[[]]],[11,"convolve_signal","","",132,[[],[["result",4],["errorreason",4]]]],[11,"convolve_signal","","",132,[[["dspvec",3]],[["result",4],["errorreason",4]]]],[11,"convolve_signal","","",130,[[],[["result",4],["errorreason",4]]]],[11,"convolve_signal","","",129,[[["vec",3]],[["result",4],["errorreason",4]]]],[11,"convolve_signal","","",130,[[["dspvec",3]],[["result",4],["errorreason",4]]]],[11,"convolve_signal","","",129,[[["dspvec",3]],[["result",4],["errorreason",4]]]],[11,"convolve_signal","","",131,[[],[["result",4],["errorreason",4]]]],[11,"convolve_signal","","",131,[[["dspvec",3]],[["result",4],["errorreason",4]]]],[11,"get_real","","",129,[[]]],[11,"get_imag","","",129,[[]]],[11,"get_magnitude","","",129,[[]]],[11,"get_magnitude_squared","","",129,[[]]],[11,"get_phase","","",129,[[]]],[11,"get_real_imag","","",129,[[]]],[11,"get_mag_phase","","",129,[[]]],[11,"get_real","","",132,[[]]],[11,"get_imag","","",132,[[]]],[11,"get_magnitude","","",132,[[]]],[11,"get_magnitude_squared","","",132,[[]]],[11,"get_phase","","",132,[[]]],[11,"get_real_imag","","",132,[[]]],[11,"get_mag_phase","","",132,[[]]],[11,"get_real","","",131,[[]]],[11,"get_imag","","",131,[[]]],[11,"get_magnitude","","",131,[[]]],[11,"get_magnitude_squared","","",131,[[]]],[11,"get_phase","","",131,[[]]],[11,"get_real_imag","","",131,[[]]],[11,"get_mag_phase","","",131,[[]]],[11,"get_real","","",130,[[]]],[11,"get_imag","","",130,[[]]],[11,"get_magnitude","","",130,[[]]],[11,"get_magnitude_squared","","",130,[[]]],[11,"get_phase","","",130,[[]]],[11,"get_real_imag","","",130,[[]]],[11,"get_mag_phase","","",130,[[]]],[11,"diff","","",131,[[]]],[11,"diff_with_start","","",131,[[]]],[11,"cum_sum","","",131,[[]]],[11,"diff","","",130,[[]]],[11,"diff_with_start","","",130,[[]]],[11,"cum_sum","","",130,[[]]],[11,"diff","","",129,[[]]],[11,"diff_with_start","","",129,[[]]],[11,"cum_sum","","",129,[[]]],[11,"diff","","",132,[[]]],[11,"diff_with_start","","",132,[[]]],[11,"cum_sum","","",132,[[]]],[11,"get","","",132,[[]]],[11,"get","","",131,[[]]],[11,"get","","",130,[[]]],[11,"get","","",129,[[]]],[11,"scale","","",132,[[["complex",3]]]],[11,"scale","","",131,[[]]],[11,"scale","","",131,[[["complex",3]]]],[11,"scale","","",132,[[]]],[11,"scale","","",130,[[]]],[11,"scale","","",129,[[]]],[11,"scale","","",130,[[["complex",3]]]],[11,"scale","","",129,[[["complex",3]]]],[11,"interpolatef","","",131,[[["realimpulseresponse",8]]]],[11,"interpolatei","","",131,[[["realfrequencyresponse",8]],[["result",4],["errorreason",4]]]],[11,"interpolate","","",131,[[["realfrequencyresponse",8],["option",4]],[["result",4],["errorreason",4]]]],[11,"interpft","","",131,[[]]],[11,"decimatei","","",131,[[]]],[11,"interpolatef","","",132,[[["realimpulseresponse",8]]]],[11,"interpolatei","","",132,[[["realfrequencyresponse",8]],[["result",4],["errorreason",4]]]],[11,"interpolate","","",132,[[["realfrequencyresponse",8],["option",4]],[["result",4],["errorreason",4]]]],[11,"interpft","","",132,[[]]],[11,"decimatei","","",132,[[]]],[11,"interpolatef","","",129,[[["realimpulseresponse",8]]]],[11,"interpolatei","","",129,[[["realfrequencyresponse",8]],[["result",4],["errorreason",4]]]],[11,"interpolate","","",129,[[["realfrequencyresponse",8],["option",4]],[["result",4],["errorreason",4]]]],[11,"interpft","","",129,[[]]],[11,"decimatei","","",129,[[]]],[11,"interpolatef","","",130,[[["realimpulseresponse",8]]]],[11,"interpolatei","","",130,[[["realfrequencyresponse",8]],[["result",4],["errorreason",4]]]],[11,"interpolate","","",130,[[["realfrequencyresponse",8],["option",4]],[["result",4],["errorreason",4]]]],[11,"interpft","","",130,[[]]],[11,"decimatei","","",130,[[]]],[11,"multiply_complex_exponential","","",131,[[]]],[11,"conj","","",131,[[]]],[11,"multiply_complex_exponential","","",132,[[]]],[11,"conj","","",132,[[]]],[11,"multiply_complex_exponential","","",130,[[]]],[11,"conj","","",130,[[]]],[11,"multiply_complex_exponential","","",129,[[]]],[11,"conj","","",129,[[]]],[11,"correlate","","",129,[[],[["result",4],["errorreason",4]]]],[11,"correlate","","",130,[[],[["result",4],["errorreason",4]]]],[11,"correlate","","",132,[[],[["result",4],["errorreason",4]]]],[11,"correlate","","",131,[[],[["result",4],["errorreason",4]]]],[11,"add_smaller","","",132,[[["matrix4xn",3]],[["result",4],["errorreason",4]]]],[11,"sub_smaller","","",132,[[["matrix4xn",3]],[["result",4],["errorreason",4]]]],[11,"div_smaller","","",132,[[["matrix4xn",3]],[["result",4],["errorreason",4]]]],[11,"mul_smaller","","",132,[[["matrix4xn",3]],[["result",4],["errorreason",4]]]],[11,"add_smaller","","",130,[[],[["result",4],["errorreason",4]]]],[11,"sub_smaller","","",130,[[],[["result",4],["errorreason",4]]]],[11,"div_smaller","","",130,[[],[["result",4],["errorreason",4]]]],[11,"mul_smaller","","",130,[[],[["result",4],["errorreason",4]]]],[11,"add_smaller","","",132,[[],[["result",4],["errorreason",4]]]],[11,"sub_smaller","","",132,[[],[["result",4],["errorreason",4]]]],[11,"div_smaller","","",132,[[],[["result",4],["errorreason",4]]]],[11,"mul_smaller","","",132,[[],[["result",4],["errorreason",4]]]],[11,"add_smaller","","",129,[[["matrixmxn",3]],[["result",4],["errorreason",4]]]],[11,"sub_smaller","","",129,[[["matrixmxn",3]],[["result",4],["errorreason",4]]]],[11,"div_smaller","","",129,[[["matrixmxn",3]],[["result",4],["errorreason",4]]]],[11,"mul_smaller","","",129,[[["matrixmxn",3]],[["result",4],["errorreason",4]]]],[11,"add_smaller","","",131,[[],[["result",4],["errorreason",4]]]],[11,"sub_smaller","","",131,[[],[["result",4],["errorreason",4]]]],[11,"div_smaller","","",131,[[],[["result",4],["errorreason",4]]]],[11,"mul_smaller","","",131,[[],[["result",4],["errorreason",4]]]],[11,"add_smaller","","",130,[[["matrix2xn",3]],[["result",4],["errorreason",4]]]],[11,"sub_smaller","","",130,[[["matrix2xn",3]],[["result",4],["errorreason",4]]]],[11,"div_smaller","","",130,[[["matrix2xn",3]],[["result",4],["errorreason",4]]]],[11,"mul_smaller","","",130,[[["matrix2xn",3]],[["result",4],["errorreason",4]]]],[11,"add_smaller","","",131,[[["matrix3xn",3]],[["result",4],["errorreason",4]]]],[11,"sub_smaller","","",131,[[["matrix3xn",3]],[["result",4],["errorreason",4]]]],[11,"div_smaller","","",131,[[["matrix3xn",3]],[["result",4],["errorreason",4]]]],[11,"mul_smaller","","",131,[[["matrix3xn",3]],[["result",4],["errorreason",4]]]],[11,"add_smaller","","",129,[[],[["result",4],["errorreason",4]]]],[11,"sub_smaller","","",129,[[],[["result",4],["errorreason",4]]]],[11,"div_smaller","","",129,[[],[["result",4],["errorreason",4]]]],[11,"mul_smaller","","",129,[[],[["result",4],["errorreason",4]]]],[11,"reverse","","",130,[[]]],[11,"swap_halves","","",130,[[]]],[11,"reverse","","",131,[[]]],[11,"swap_halves","","",131,[[]]],[11,"reverse","","",132,[[]]],[11,"swap_halves","","",132,[[]]],[11,"reverse","","",129,[[]]],[11,"swap_halves","","",129,[[]]],[11,"resize","","",132,[[],[["result",4],["errorreason",4]]]],[11,"resize","","",130,[[],[["result",4],["errorreason",4]]]],[11,"resize","","",129,[[],[["result",4],["errorreason",4]]]],[11,"resize","","",131,[[],[["result",4],["errorreason",4]]]],[11,"offset","","",132,[[["complex",3]]]],[11,"offset","","",129,[[]]],[11,"offset","","",131,[[]]],[11,"offset","","",129,[[["complex",3]]]],[11,"offset","","",132,[[]]],[11,"offset","","",130,[[]]],[11,"offset","","",130,[[["complex",3]]]],[11,"offset","","",131,[[["complex",3]]]],[11,"interpolate_hermite","","",129,[[]]],[11,"interpolate_lin","","",129,[[]]],[11,"interpolate_hermite","","",132,[[]]],[11,"interpolate_lin","","",132,[[]]],[11,"interpolate_hermite","","",131,[[]]],[11,"interpolate_lin","","",131,[[]]],[11,"interpolate_hermite","","",130,[[]]],[11,"interpolate_lin","","",130,[[]]],[11,"statistics_split_prec","","",131,[[],[["errorreason",4],["result",4]]]],[11,"statistics_split_prec","","",130,[[],[["errorreason",4],["result",4]]]],[11,"statistics_split_prec","","",129,[[],[["result",4],["errorreason",4],["vec",3]]]],[11,"statistics_split_prec","","",132,[[],[["errorreason",4],["result",4]]]],[11,"sum","","",130,[[]]],[11,"sum_sq","","",130,[[]]],[11,"sum","","",130,[[]]],[11,"sum_sq","","",130,[[]]],[11,"sum","","",130,[[]]],[11,"sum_sq","","",130,[[]]],[11,"sum","","",129,[[],["vec",3]]],[11,"sum_sq","","",129,[[],["vec",3]]],[11,"dot_product","","",129,[[],[["errorreason",4],["vec",3],["result",4]]]],[11,"dot_product","","",130,[[["matrix2xn",3]],[["errorreason",4],["vec",3],["result",4]]]],[11,"dot_product","","",130,[[],[["result",4],["errorreason",4]]]],[11,"dot_product","","",132,[[["matrix4xn",3]],[["errorreason",4],["vec",3],["result",4]]]],[11,"dot_product","","",132,[[],[["result",4],["errorreason",4]]]],[11,"dot_product","","",131,[[],[["result",4],["errorreason",4]]]],[11,"dot_product","","",129,[[["matrixmxn",3]],[["errorreason",4],["vec",3],["result",4]]]],[11,"dot_product","","",131,[[["matrix3xn",3]],[["errorreason",4],["vec",3],["result",4]]]],[11,"to_complex","","",130,[[],["result",4]]],[11,"to_complex","","",129,[[],["result",4]]],[11,"to_complex","","",132,[[],["result",4]]],[11,"to_complex","","",131,[[],["result",4]]],[11,"wrap","","",129,[[]]],[11,"unwrap","","",129,[[]]],[11,"wrap","","",132,[[]]],[11,"unwrap","","",132,[[]]],[11,"wrap","","",130,[[]]],[11,"unwrap","","",130,[[]]],[11,"wrap","","",131,[[]]],[11,"unwrap","","",131,[[]]],[11,"sin","","",132,[[]]],[11,"cos","","",132,[[]]],[11,"tan","","",132,[[]]],[11,"asin","","",132,[[]]],[11,"acos","","",132,[[]]],[11,"atan","","",132,[[]]],[11,"sinh","","",132,[[]]],[11,"cosh","","",132,[[]]],[11,"tanh","","",132,[[]]],[11,"asinh","","",132,[[]]],[11,"acosh","","",132,[[]]],[11,"atanh","","",132,[[]]],[11,"sin","","",131,[[]]],[11,"cos","","",131,[[]]],[11,"tan","","",131,[[]]],[11,"asin","","",131,[[]]],[11,"acos","","",131,[[]]],[11,"atan","","",131,[[]]],[11,"sinh","","",131,[[]]],[11,"cosh","","",131,[[]]],[11,"tanh","","",131,[[]]],[11,"asinh","","",131,[[]]],[11,"acosh","","",131,[[]]],[11,"atanh","","",131,[[]]],[11,"sin","","",130,[[]]],[11,"cos","","",130,[[]]],[11,"tan","","",130,[[]]],[11,"asin","","",130,[[]]],[11,"acos","","",130,[[]]],[11,"atan","","",130,[[]]],[11,"sinh","","",130,[[]]],[11,"cosh","","",130,[[]]],[11,"tanh","","",130,[[]]],[11,"asinh","","",130,[[]]],[11,"acosh","","",130,[[]]],[11,"atanh","","",130,[[]]],[11,"sin","","",129,[[]]],[11,"cos","","",129,[[]]],[11,"tan","","",129,[[]]],[11,"asin","","",129,[[]]],[11,"acos","","",129,[[]]],[11,"atan","","",129,[[]]],[11,"sinh","","",129,[[]]],[11,"cosh","","",129,[[]]],[11,"tanh","","",129,[[]]],[11,"asinh","","",129,[[]]],[11,"acosh","","",129,[[]]],[11,"atanh","","",129,[[]]],[11,"plain_sifft","","",129,[[],["result",4]]],[11,"sifft","","",129,[[],["result",4]]],[11,"windowed_sifft","","",129,[[["windowfunction",8]],["result",4]]],[11,"plain_sifft","","",131,[[],["result",4]]],[11,"sifft","","",131,[[],["result",4]]],[11,"windowed_sifft","","",131,[[["windowfunction",8]],["result",4]]],[11,"plain_sifft","","",132,[[],["result",4]]],[11,"sifft","","",132,[[],["result",4]]],[11,"windowed_sifft","","",132,[[["windowfunction",8]],["result",4]]],[11,"plain_sifft","","",130,[[],["result",4]]],[11,"sifft","","",130,[[],["result",4]]],[11,"windowed_sifft","","",130,[[["windowfunction",8]],["result",4]]],[11,"to_complex_b","","",132,[[]]],[11,"to_complex_b","","",131,[[]]],[11,"to_complex_b","","",129,[[]]],[11,"to_complex_b","","",130,[[]]],[11,"plain_ifft","","",132,[[]]],[11,"ifft","","",132,[[]]],[11,"windowed_ifft","","",132,[[["windowfunction",8]]]],[11,"plain_ifft","","",129,[[]]],[11,"ifft","","",129,[[]]],[11,"windowed_ifft","","",129,[[["windowfunction",8]]]],[11,"plain_ifft","","",131,[[]]],[11,"ifft","","",131,[[]]],[11,"windowed_ifft","","",131,[[["windowfunction",8]]]],[11,"plain_ifft","","",130,[[]]],[11,"ifft","","",130,[[]]],[11,"windowed_ifft","","",130,[[["windowfunction",8]]]],[11,"rededicate_from_force","","",132,[[["matrix4xn",3]],["matrix4xn",3]]],[11,"rededicate_with_runtime_data","","",132,[[["matrix4xn",3],["datadomain",4]],["matrix4xn",3]]],[11,"rededicate_from_force","","",130,[[["matrix2xn",3]],["matrix2xn",3]]],[11,"rededicate_with_runtime_data","","",130,[[["matrix2xn",3],["datadomain",4]],["matrix2xn",3]]],[11,"rededicate_from_force","","",131,[[["matrix3xn",3]],["matrix3xn",3]]],[11,"rededicate_with_runtime_data","","",131,[[["matrix3xn",3],["datadomain",4]],["matrix3xn",3]]],[11,"rededicate_from_force","","",129,[[["matrixmxn",3]],["matrixmxn",3]]],[11,"rededicate_with_runtime_data","","",129,[[["datadomain",4],["matrixmxn",3]],["matrixmxn",3]]],[11,"map_aggregate","","",129,[[],[["result",4],["errorreason",4],["vec",3]]]],[11,"map_aggregate","","",132,[[],[["errorreason",4],["result",4]]]],[11,"map_aggregate","","",130,[[],[["result",4],["errorreason",4]]]],[11,"map_aggregate","","",131,[[],[["result",4],["errorreason",4]]]],[11,"mirror","","",132,[[]]],[11,"fft_shift","","",132,[[]]],[11,"ifft_shift","","",132,[[]]],[11,"mirror","","",131,[[]]],[11,"fft_shift","","",131,[[]]],[11,"ifft_shift","","",131,[[]]],[11,"mirror","","",129,[[]]],[11,"fft_shift","","",129,[[]]],[11,"ifft_shift","","",129,[[]]],[11,"mirror","","",130,[[]]],[11,"fft_shift","","",130,[[]]],[11,"ifft_shift","","",130,[[]]],[11,"delta","","",129,[[]]],[11,"set_delta","","",129,[[]]],[11,"row_len","","",129,[[]]],[11,"row_points","","",129,[[]]],[11,"col_len","","",129,[[]]],[11,"rows","","",129,[[]]],[11,"rows_mut","","",129,[[]]],[11,"delta","","",131,[[]]],[11,"set_delta","","",131,[[]]],[11,"row_len","","",131,[[]]],[11,"row_points","","",131,[[]]],[11,"col_len","","",131,[[]]],[11,"rows","","",131,[[]]],[11,"rows_mut","","",131,[[]]],[11,"delta","","",130,[[]]],[11,"set_delta","","",130,[[]]],[11,"row_len","","",130,[[]]],[11,"row_points","","",130,[[]]],[11,"col_len","","",130,[[]]],[11,"rows","","",130,[[]]],[11,"rows_mut","","",130,[[]]],[11,"delta","","",132,[[]]],[11,"set_delta","","",132,[[]]],[11,"row_len","","",132,[[]]],[11,"row_points","","",132,[[]]],[11,"col_len","","",132,[[]]],[11,"rows","","",132,[[]]],[11,"rows_mut","","",132,[[]]],[11,"magnitude","","",132,[[]]],[11,"magnitude_squared","","",132,[[]]],[11,"to_real","","",132,[[]]],[11,"to_imag","","",132,[[]]],[11,"phase","","",132,[[]]],[11,"magnitude","","",131,[[]]],[11,"magnitude_squared","","",131,[[]]],[11,"to_real","","",131,[[]]],[11,"to_imag","","",131,[[]]],[11,"phase","","",131,[[]]],[11,"magnitude","","",130,[[]]],[11,"magnitude_squared","","",130,[[]]],[11,"to_real","","",130,[[]]],[11,"to_imag","","",130,[[]]],[11,"phase","","",130,[[]]],[11,"magnitude","","",129,[[]]],[11,"magnitude_squared","","",129,[[]]],[11,"to_real","","",129,[[]]],[11,"to_imag","","",129,[[]]],[11,"phase","","",129,[[]]],[11,"get_meta_data","","",130,[[],["typemetadata",3]]],[11,"get_meta_data","","",132,[[],["typemetadata",3]]],[11,"get_meta_data","","",131,[[],["typemetadata",3]]],[11,"get_meta_data","","",129,[[],["typemetadata",3]]],[11,"dot_product_prec","","",132,[[["matrix4xn",3]],[["errorreason",4],["vec",3],["result",4]]]],[11,"dot_product_prec","","",129,[[["matrixmxn",3]],[["errorreason",4],["vec",3],["result",4]]]],[11,"dot_product_prec","","",132,[[],[["result",4],["errorreason",4]]]],[11,"dot_product_prec","","",130,[[["matrix2xn",3]],[["errorreason",4],["vec",3],["result",4]]]],[11,"dot_product_prec","","",131,[[],[["result",4],["errorreason",4]]]],[11,"dot_product_prec","","",130,[[],[["result",4],["errorreason",4]]]],[11,"dot_product_prec","","",131,[[["matrix3xn",3]],[["errorreason",4],["vec",3],["result",4]]]],[11,"dot_product_prec","","",129,[[],[["errorreason",4],["vec",3],["result",4]]]],[11,"statistics_prec","","",131,[[]]],[11,"statistics_prec","","",129,[[],[["statistics",3],["vec",3]]]],[11,"statistics_prec","","",130,[[]]],[11,"statistics_prec","","",132,[[]]],[11,"statistics_split","","",131,[[],[["result",4],["errorreason",4]]]],[11,"statistics_split","","",129,[[],[["result",4],["errorreason",4],["vec",3]]]],[11,"statistics_split","","",132,[[],[["errorreason",4],["result",4]]]],[11,"statistics_split","","",130,[[],[["errorreason",4],["result",4]]]],[11,"apply_window","","",130,[[["windowfunction",8]]]],[11,"unapply_window","","",130,[[["windowfunction",8]]]],[11,"apply_window","","",132,[[["windowfunction",8]]]],[11,"unapply_window","","",132,[[["windowfunction",8]]]],[11,"apply_window","","",129,[[["windowfunction",8]]]],[11,"unapply_window","","",129,[[["windowfunction",8]]]],[11,"apply_window","","",131,[[["windowfunction",8]]]],[11,"unapply_window","","",131,[[["windowfunction",8]]]],[11,"abs","","",130,[[]]],[11,"abs","","",131,[[]]],[11,"abs","","",132,[[]]],[11,"abs","","",129,[[]]],[11,"magnitude_b","","",132,[[]]],[11,"magnitude_squared_b","","",132,[[]]],[11,"to_real_b","","",132,[[]]],[11,"to_imag_b","","",132,[[]]],[11,"phase_b","","",132,[[]]],[11,"magnitude_b","","",130,[[]]],[11,"magnitude_squared_b","","",130,[[]]],[11,"to_real_b","","",130,[[]]],[11,"to_imag_b","","",130,[[]]],[11,"phase_b","","",130,[[]]],[11,"magnitude_b","","",129,[[]]],[11,"magnitude_squared_b","","",129,[[]]],[11,"to_real_b","","",129,[[]]],[11,"to_imag_b","","",129,[[]]],[11,"phase_b","","",129,[[]]],[11,"magnitude_b","","",131,[[]]],[11,"magnitude_squared_b","","",131,[[]]],[11,"to_real_b","","",131,[[]]],[11,"to_imag_b","","",131,[[]]],[11,"phase_b","","",131,[[]]],[11,"convolve","","",132,[[["realimpulseresponse",8]]]],[11,"convolve","","",129,[[["compleximpulseresponse",8]]]],[11,"convolve","","",131,[[["realimpulseresponse",8]]]],[11,"convolve","","",131,[[["compleximpulseresponse",8]]]],[11,"convolve","","",130,[[["realimpulseresponse",8]]]],[11,"convolve","","",130,[[["compleximpulseresponse",8]]]],[11,"convolve","","",132,[[["compleximpulseresponse",8]]]],[11,"convolve","","",129,[[["realimpulseresponse",8]]]],[11,"is_symmetric","basic_dsp::conv_types","",108,[[]]],[11,"calc","","",108,[[]]],[11,"is_symmetric","","",111,[[]]],[11,"calc","","",111,[[]]],[11,"is_symmetric","","",112,[[]]],[11,"calc","","",112,[[]]],[11,"is_symmetric","","",108,[[]]],[11,"calc","","",108,[[]]],[11,"data_mut","basic_dsp","",16,[[["rangefrom",3]]]],[11,"data_mut","","",16,[[]]],[11,"data_mut","","",16,[[["rangeto",3]]]],[11,"data_mut","","",16,[[["range",3]]]],[11,"data_mut","","",16,[[["rangefull",3]]]],[11,"get_meta_data","","",16,[[],["typemetadata",3]]],[11,"borrow","","",121,[[]]],[11,"alloc_len","","",121,[[]]],[11,"borrow","","",125,[[]]],[11,"alloc_len","","",125,[[]]],[11,"borrow","","",127,[[]]],[11,"alloc_len","","",127,[[]]],[11,"dot_product_prec","","",16,[[],[["result",4],["errorreason",4]]]],[11,"dot_product_prec","","",16,[[],[["result",4],["complex",3],["errorreason",4]]]],[11,"datac_mut","","",16,[[["rangefrom",3]]]],[11,"datac_mut","","",16,[[["rangefull",3]]]],[11,"datac_mut","","",16,[[],["complex",3]]],[11,"datac_mut","","",16,[[["rangeto",3]]]],[11,"datac_mut","","",16,[[["range",3]]]],[11,"sin","","",16,[[]]],[11,"cos","","",16,[[]]],[11,"tan","","",16,[[]]],[11,"asin","","",16,[[]]],[11,"acos","","",16,[[]]],[11,"atan","","",16,[[]]],[11,"sinh","","",16,[[]]],[11,"cosh","","",16,[[]]],[11,"tanh","","",16,[[]]],[11,"asinh","","",16,[[]]],[11,"acosh","","",16,[[]]],[11,"atanh","","",16,[[]]],[11,"plain_sifft","","",16,[[],["result",4]]],[11,"sifft","","",16,[[],["result",4]]],[11,"windowed_sifft","","",16,[[["windowfunction",8]],["result",4]]],[11,"to_complex_b","","",16,[[]]],[11,"plain_ifft","","",16,[[]]],[11,"ifft","","",16,[[]]],[11,"windowed_ifft","","",16,[[["windowfunction",8]]]],[11,"rededicate_from_force","","",16,[[["dspvec",3]],[["real",3],["freq",3],["dspvec",3]]]],[11,"rededicate_with_runtime_data","","",16,[[["dspvec",3],["datadomain",4]],[["real",3],["freq",3],["dspvec",3]]]],[11,"rededicate_from_force","","",16,[[["dspvec",3]],[["dspvec",3],["realorcomplex",3],["timeorfreq",3]]]],[11,"rededicate_with_runtime_data","","",16,[[["dspvec",3],["datadomain",4]],[["dspvec",3],["realorcomplex",3],["timeorfreq",3]]]],[11,"rededicate_from_force","","",16,[[["dspvec",3]],[["freq",3],["complex",3],["dspvec",3]]]],[11,"rededicate_with_runtime_data","","",16,[[["dspvec",3],["datadomain",4]],[["freq",3],["complex",3],["dspvec",3]]]],[11,"rededicate_from_force","","",16,[[["dspvec",3]],[["dspvec",3],["complex",3],["time",3]]]],[11,"rededicate_with_runtime_data","","",16,[[["dspvec",3],["datadomain",4]],[["dspvec",3],["complex",3],["time",3]]]],[11,"rededicate_from_force","","",16,[[["dspvec",3]],[["real",3],["dspvec",3],["time",3]]]],[11,"rededicate_with_runtime_data","","",16,[[["dspvec",3],["datadomain",4]],[["real",3],["dspvec",3],["time",3]]]],[11,"multiply_frequency_response","","",16,[[["realfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",16,[[["complexfrequencyresponse",8]]]],[11,"map_inplace","","",16,[[]]],[11,"map_inplace","","",16,[[]]],[11,"getf","","",16,[[]]],[11,"is_complex","basic_dsp::meta","",114,[[]]],[11,"to_complex","","",114,[[]]],[11,"to_real","","",114,[[]]],[11,"is_complex","","",113,[[]]],[11,"to_complex","","",113,[[]]],[11,"to_real","","",113,[[]]],[11,"is_complex","","",4,[[]]],[11,"to_complex","","",4,[[]]],[11,"to_real","","",4,[[]]],[11,"zero_pad","basic_dsp","",16,[[["paddingoption",4]],[["result",4],["errorreason",4]]]],[11,"zero_interleave","","",16,[[],[["result",4],["errorreason",4]]]],[11,"delta","","",16,[[]]],[11,"set_delta","","",16,[[]]],[11,"len","","",16,[[]]],[11,"is_empty","","",16,[[]]],[11,"points","","",16,[[]]],[11,"get_multicore_settings","","",16,[[],["multicoresettings",3]]],[11,"set_multicore_settings","","",16,[[["multicoresettings",3]]]],[11,"alloc_len","","",16,[[]]],[11,"sum_prec","","",16,[[],["complex",3]]],[11,"sum_sq_prec","","",16,[[],["complex",3]]],[11,"sum_prec","","",16,[[]]],[11,"sum_sq_prec","","",16,[[]]],[11,"sum_prec","","",16,[[],["complex",3]]],[11,"sum_sq_prec","","",16,[[],["complex",3]]],[11,"sum_prec","","",16,[[]]],[11,"sum_sq_prec","","",16,[[]]],[11,"statistics_split","","",16,[[],[["arrayvec",3],["result",4],["errorreason",4]]]],[11,"statistics_split","","",16,[[],[["arrayvec",3],["result",4],["errorreason",4]]]],[11,"set_real_imag","","",16,[[],[["result",4],["errorreason",4]]]],[11,"set_mag_phase","","",16,[[],[["result",4],["errorreason",4]]]],[11,"get_real","","",16,[[]]],[11,"get_imag","","",16,[[]]],[11,"get_magnitude","","",16,[[]]],[11,"get_magnitude_squared","","",16,[[]]],[11,"get_phase","","",16,[[]]],[11,"get_real_imag","","",16,[[]]],[11,"get_mag_phase","","",16,[[]]],[11,"ln_approx","","",16,[[]]],[11,"exp_approx","","",16,[[]]],[11,"sin_approx","","",16,[[]]],[11,"cos_approx","","",16,[[]]],[11,"log_approx","","",16,[[]]],[11,"expf_approx","","",16,[[]]],[11,"powf_approx","","",16,[[]]],[11,"is_symmetric","basic_dsp::conv_types","",109,[[]]],[11,"calc","","",109,[[],["complex",3]]],[11,"is_symmetric","","",109,[[]]],[11,"calc","","",109,[[],["complex",3]]],[11,"convolve","basic_dsp","",16,[[["compleximpulseresponse",8]]]],[11,"convolve","","",16,[[["realimpulseresponse",8]]]],[11,"fmt","","",95,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","basic_dsp::meta","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","basic_dsp","",98,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",97,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","basic_dsp::meta","",116,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",114,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",5,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","basic_dsp","",96,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",16,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","basic_dsp::meta","",115,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",113,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","basic_dsp","",13,[[["formatter",3]],[["result",4],["error",3]]]],[11,"add","","",16,[[],[["result",4],["errorreason",4]]]],[11,"sub","","",16,[[],[["result",4],["errorreason",4]]]],[11,"mul","","",16,[[],[["result",4],["errorreason",4]]]],[11,"div","","",16,[[],[["result",4],["errorreason",4]]]],[11,"index_mut","","",16,[[["rangefrom",3]]]],[11,"index_mut","","",16,[[["range",3]]]],[11,"index_mut","","",16,[[]]],[11,"index_mut","","",16,[[],["complex",3]]],[11,"index_mut","","",16,[[["rangefull",3]]]],[11,"index_mut","","",16,[[["rangeto",3]]]],[11,"index_mut","","",16,[[["rangefrom",3]]]],[11,"index_mut","","",16,[[["range",3]]]],[11,"index_mut","","",16,[[["rangefull",3]]]],[11,"index_mut","","",16,[[["rangeto",3]]]],[11,"interpolatef","","",16,[[["realimpulseresponse",8]]]],[11,"interpolatei","","",16,[[["realfrequencyresponse",8]],[["result",4],["errorreason",4]]]],[11,"interpft","","",16,[[]]],[11,"interpolate","","",16,[[["realfrequencyresponse",8],["option",4]],[["result",4],["errorreason",4]]]],[11,"decimatei","","",16,[[]]],[11,"multiply_complex_exponential","","",16,[[]]],[11,"conj","","",16,[[]]],[11,"is_symmetric","basic_dsp::window_functions","",118,[[]]],[11,"window","","",118,[[]]],[11,"is_symmetric","","",117,[[]]],[11,"window","","",117,[[]]],[11,"is_symmetric","","",120,[[]]],[11,"window","","",120,[[]]],[11,"is_symmetric","","",119,[[]]],[11,"window","","",119,[[]]],[11,"eq","basic_dsp","",95,[[["errorreason",4]]]],[11,"eq","","",97,[[["statistics",3]]]],[11,"ne","","",97,[[["statistics",3]]]],[11,"eq","basic_dsp::meta","",5,[[["timeorfreq",3]]]],[11,"ne","","",5,[[["timeorfreq",3]]]],[11,"eq","basic_dsp","",96,[[["paddingoption",4]]]],[11,"eq","basic_dsp::meta","",116,[[["freq",3]]]],[11,"eq","","",113,[[["real",3]]]],[11,"eq","","",4,[[["realorcomplex",3]]]],[11,"ne","","",4,[[["realorcomplex",3]]]],[11,"eq","","",115,[[["time",3]]]],[11,"eq","basic_dsp","",98,[[["datadomain",4]]]],[11,"eq","basic_dsp::meta","",114,[[["complex",3]]]],[11,"to_complex","basic_dsp","",16,[[],["result",4]]],[11,"dot_product","","",16,[[],[["result",4],["errorreason",4]]]],[11,"dot_product","","",16,[[],[["result",4],["complex",3],["errorreason",4]]]],[11,"rededicate_from","","",16,[[],["dspvec",3]]],[11,"rededicate","","",16,[[]]],[11,"get","","",16,[[]]],[11,"get","","",16,[[]]],[11,"get","","",16,[[]]],[11,"get","","",16,[[]]],[11,"domain","basic_dsp::meta","",5,[[],["datadomain",4]]],[11,"to_freq","","",5,[[]]],[11,"to_time","","",5,[[]]],[11,"domain","","",115,[[],["datadomain",4]]],[11,"to_freq","","",115,[[]]],[11,"to_time","","",115,[[]]],[11,"domain","","",116,[[],["datadomain",4]]],[11,"to_time","","",116,[[]]],[11,"to_freq","","",116,[[]]],[11,"default","basic_dsp","",127,[[],["singlebuffer",3]]],[11,"default","basic_dsp::conv_types","",112,[[],["sincfunction",3]]],[11,"zero_pad_b","basic_dsp","",16,[[["paddingoption",4]],[["result",4],["errorreason",4]]]],[11,"zero_interleave_b","","",16,[[]]],[11,"add_smaller","","",16,[[],[["result",4],["errorreason",4]]]],[11,"sub_smaller","","",16,[[],[["result",4],["errorreason",4]]]],[11,"mul_smaller","","",16,[[],[["result",4],["errorreason",4]]]],[11,"div_smaller","","",16,[[],[["result",4],["errorreason",4]]]],[11,"add_prec","","",97,[[["complex",3],["complex",3]]]],[11,"add_prec","","",97,[[]]],[11,"resize","","",16,[[],[["result",4],["errorreason",4]]]],[11,"offset","","",16,[[["complex",3]]]],[11,"offset","","",16,[[]]],[11,"statistics_prec","","",16,[[],["statistics",3]]],[11,"statistics_prec","","",16,[[],[["complex",3],["statistics",3]]]],[11,"statistics_prec","","",16,[[],["statistics",3]]],[11,"statistics_prec","","",16,[[],[["complex",3],["statistics",3]]]],[11,"sum","","",16,[[],["complex",3]]],[11,"sum_sq","","",16,[[],["complex",3]]],[11,"sum","","",16,[[]]],[11,"sum_sq","","",16,[[]]],[11,"is_symmetric","basic_dsp::conv_types","",110,[[]]],[11,"calc","","",110,[[],["complex",3]]],[11,"is_symmetric","","",110,[[]]],[11,"calc","","",110,[[],["complex",3]]],[11,"is_symmetric","","",111,[[]]],[11,"calc","","",111,[[]]],[11,"is_symmetric","","",107,[[]]],[11,"calc","","",107,[[]]],[11,"is_symmetric","","",112,[[]]],[11,"calc","","",112,[[]]],[11,"is_symmetric","","",107,[[]]],[11,"calc","","",107,[[]]],[11,"prepare_argument","basic_dsp","",16,[[]]],[11,"prepare_argument_padded","","",16,[[]]],[11,"from","","",16,[[],[["real",3],["freq",3],["dspvec",3]]]],[11,"from","","",16,[[],[["dspvec",3],["complex",3],["time",3]]]],[11,"from","","",16,[[],[["freq",3],["complex",3],["dspvec",3]]]],[11,"from","","",16,[[],[["real",3],["dspvec",3],["time",3]]]],[11,"index","","",16,[[["rangefrom",3]]]],[11,"index","","",16,[[["rangeto",3]]]],[11,"index","","",16,[[["rangefrom",3]]]],[11,"index","","",16,[[]]],[11,"index","","",16,[[["range",3]]]],[11,"index","","",16,[[],["complex",3]]],[11,"index","","",16,[[["rangeto",3]]]],[11,"index","","",16,[[["rangefull",3]]]],[11,"index","","",16,[[["rangefull",3]]]],[11,"index","","",16,[[["range",3]]]],[11,"data","","",16,[[["rangeto",3]]]],[11,"data","","",16,[[["rangefrom",3]]]],[11,"data","","",16,[[["range",3]]]],[11,"data","","",16,[[]]],[11,"data","","",16,[[["rangefull",3]]]],[11,"map_aggregate","","",16,[[],[["result",4],["errorreason",4]]]],[11,"map_aggregate","","",16,[[],[["result",4],["errorreason",4]]]],[11,"sqrt","","",16,[[]]],[11,"square","","",16,[[]]],[11,"root","","",16,[[]]],[11,"powf","","",16,[[]]],[11,"ln","","",16,[[]]],[11,"exp","","",16,[[]]],[11,"log","","",16,[[]]],[11,"expf","","",16,[[]]],[11,"mirror","","",16,[[]]],[11,"fft_shift","","",16,[[]]],[11,"ifft_shift","","",16,[[]]],[11,"magnitude","","",16,[[]]],[11,"magnitude_squared","","",16,[[]]],[11,"to_real","","",16,[[]]],[11,"to_imag","","",16,[[]]],[11,"phase","","",16,[[]]],[11,"trade","","",123,[[]]],[11,"trade","","",126,[[["vec",3]]]],[11,"trade","","",124,[[["vec",3]]]],[11,"trade","","",122,[[]]],[11,"apply_window","","",16,[[["windowfunction",8]]]],[11,"unapply_window","","",16,[[["windowfunction",8]]]],[11,"datac","","",16,[[["rangefull",3]]]],[11,"datac","","",16,[[],["complex",3]]],[11,"datac","","",16,[[["rangeto",3]]]],[11,"datac","","",16,[[["rangefrom",3]]]],[11,"datac","","",16,[[["range",3]]]],[11,"plain_sfft","","",16,[[],["result",4]]],[11,"sfft","","",16,[[],["result",4]]],[11,"windowed_sfft","","",16,[[["windowfunction",8]],["result",4]]],[11,"clone","","",98,[[],["datadomain",4]]],[11,"clone","basic_dsp::meta","",116,[[],["freq",3]]],[11,"clone","","",113,[[],["real",3]]],[11,"clone","","",114,[[],["complex",3]]],[11,"clone","","",4,[[],["realorcomplex",3]]],[11,"clone","basic_dsp","",97,[[],["statistics",3]]],[11,"clone","basic_dsp::meta","",115,[[],["time",3]]],[11,"clone","basic_dsp","",95,[[],["errorreason",4]]],[11,"clone","","",16,[[],["dspvec",3]]],[11,"clone_from","","",16,[[["dspvec",3]]]],[11,"clone","","",96,[[],["paddingoption",4]]],[11,"clone","basic_dsp::meta","",5,[[],["timeorfreq",3]]],[11,"clone","basic_dsp","",128,[[],["typemetadata",3]]],[11,"clone","","",13,[[],["multicoresettings",3]]],[11,"resize_b","","",16,[[],[["result",4],["errorreason",4]]]],[11,"plain_fft","","",16,[[]]],[11,"fft","","",16,[[]]],[11,"windowed_fft","","",16,[[["windowfunction",8]]]],[11,"abs","","",16,[[]]],[11,"split_into","","",16,[[],[["result",4],["errorreason",4]]]],[11,"magnitude_b","","",16,[[]]],[11,"magnitude_squared_b","","",16,[[]]],[11,"to_real_b","","",16,[[]]],[11,"to_imag_b","","",16,[[]]],[11,"phase_b","","",16,[[]]],[11,"diff","","",16,[[]]],[11,"diff_with_start","","",16,[[]]],[11,"cum_sum","","",16,[[]]],[11,"domain","","",128,[[],["datadomain",4]]],[11,"is_complex","","",128,[[]]],[11,"domain","","",16,[[],["datadomain",4]]],[11,"is_complex","","",16,[[]]],[11,"scale","","",16,[[]]],[11,"scale","","",16,[[["complex",3]]]],[11,"correlate","","",16,[[],[["result",4],["errorreason",4]]]],[11,"reverse","","",16,[[]]],[11,"swap_halves","","",16,[[]]],[11,"empty","","",97,[[],[["statistics",3],["complex",3]]]],[11,"invalid","","",97,[[],[["statistics",3],["complex",3]]]],[11,"merge","","",97,[[],[["statistics",3],["complex",3]]]],[11,"merge_cols","","",97,[[],["arrayvec",3]]],[11,"empty_vec","","",97,[[],["arrayvec",3]]],[11,"add","","",97,[[["complex",3]]]],[11,"empty","","",97,[[],["statistics",3]]],[11,"invalid","","",97,[[],["statistics",3]]],[11,"merge","","",97,[[],["statistics",3]]],[11,"merge_cols","","",97,[[],["arrayvec",3]]],[11,"empty_vec","","",97,[[],["arrayvec",3]]],[11,"add","","",97,[[]]],[11,"interpolate_lin","","",16,[[]]],[11,"interpolate_hermite","","",16,[[]]],[11,"statistics_split_prec","","",16,[[],[["errorreason",4],["result",4],["arrayvec",3]]]],[11,"statistics_split_prec","","",16,[[],[["result",4],["arrayvec",3],["errorreason",4]]]],[11,"statistics_split_prec","","",16,[[],[["result",4],["arrayvec",3],["errorreason",4]]]],[11,"statistics_split_prec","","",16,[[],[["errorreason",4],["result",4],["arrayvec",3]]]],[11,"statistics","","",16,[[],[["statistics",3],["complex",3]]]],[11,"statistics","","",16,[[],["statistics",3]]],[11,"deref","","",126,[[]]],[11,"deref","","",124,[[]]],[11,"deref","","",123,[[]]],[11,"deref","","",122,[[]]],[11,"deref_mut","","",122,[[]]],[11,"deref_mut","","",126,[[]]],[11,"deref_mut","","",123,[[]]],[11,"deref_mut","","",124,[[]]],[11,"wrap","","",16,[[]]],[11,"unwrap","","",16,[[]]],[11,"merge","","",16,[[],[["result",4],["errorreason",4]]]],[11,"convolve_signal","","",16,[[["dspvec",3]],[["result",4],["errorreason",4]]]],[11,"zero","basic_dsp::numbers","",9,[[],["complex",3]]],[11,"default","","",9,[[],["complex",3]]],[11,"product","","",9,[[],["complex",3]]],[11,"product","","",9,[[],["complex",3]]],[11,"one","","",9,[[],["complex",3]]],[11,"is_one","","",9,[[]]],[11,"set_one","","",9,[[]]],[11,"as_","","",9,[[]]],[11,"mul_assign","","",9,[[["complex",3]]]],[11,"mul_assign","","",9,[[]]],[11,"mul_assign","","",9,[[["complex",3]]]],[11,"mul_assign","","",9,[[]]],[11,"fmt","","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"mul","","",9,[[["complex",3]]]],[11,"mul","","",9,[[]]],[11,"mul","","",9,[[]]],[11,"mul","","",9,[[["complex",3]]]],[11,"pow","","",9,[[]]],[11,"pow","","",9,[[]]],[11,"pow","","",9,[[]]],[11,"pow","","",9,[[["complex",3]]]],[11,"pow","","",9,[[]]],[11,"pow","","",9,[[["complex",3]]]],[11,"clone","","",9,[[],["complex",3]]],[11,"fmt","","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"sub","","",9,[[["complex",3]]]],[11,"sub","","",9,[[]]],[11,"sub","","",9,[[]]],[11,"sub","","",9,[[["complex",3]]]],[11,"fmt","","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"inv","","",9,[[]]],[11,"neg","","",9,[[]]],[11,"from","","",9,[[],[["complex",3],["option",4]]]],[11,"zero","","",9,[[],["complex",3]]],[11,"is_zero","","",9,[[]]],[11,"set_zero","","",9,[[]]],[11,"div","","",9,[[["complex",3]]]],[11,"div","","",9,[[["complex",3]]]],[11,"div","","",9,[[]]],[11,"div","","",9,[[]]],[11,"rem","","",9,[[]]],[11,"rem","","",9,[[["complex",3]]]],[11,"rem","","",9,[[]]],[11,"rem","","",9,[[["complex",3]]]],[11,"add","","",9,[[["complex",3]]]],[11,"add","","",9,[[["complex",3]]]],[11,"add","","",9,[[]]],[11,"add","","",9,[[]]],[11,"fmt","","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"mul_add","","",9,[[["complex",3]],["complex",3]]],[11,"from","","",9,[[],["complex",3]]],[11,"from","","",9,[[],["complex",3]]],[11,"eq","","",9,[[["complex",3]]]],[11,"ne","","",9,[[["complex",3]]]],[11,"div_assign","","",9,[[]]],[11,"div_assign","","",9,[[["complex",3]]]],[11,"div_assign","","",9,[[]]],[11,"div_assign","","",9,[[["complex",3]]]],[11,"hash","","",9,[[]]],[11,"to_usize","","",9,[[],["option",4]]],[11,"to_isize","","",9,[[],["option",4]]],[11,"to_u8","","",9,[[],["option",4]]],[11,"to_u16","","",9,[[],["option",4]]],[11,"to_u32","","",9,[[],["option",4]]],[11,"to_u64","","",9,[[],["option",4]]],[11,"to_i8","","",9,[[],["option",4]]],[11,"to_i16","","",9,[[],["option",4]]],[11,"to_i32","","",9,[[],["option",4]]],[11,"to_i64","","",9,[[],["option",4]]],[11,"to_u128","","",9,[[],["option",4]]],[11,"to_i128","","",9,[[],["option",4]]],[11,"to_f32","","",9,[[],["option",4]]],[11,"to_f64","","",9,[[],["option",4]]],[11,"add_assign","","",9,[[]]],[11,"add_assign","","",9,[[["complex",3]]]],[11,"add_assign","","",9,[[]]],[11,"add_assign","","",9,[[["complex",3]]]],[11,"sub_assign","","",9,[[["complex",3]]]],[11,"sub_assign","","",9,[[]]],[11,"sub_assign","","",9,[[]]],[11,"sub_assign","","",9,[[["complex",3]]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",9,[[],[["result",4],["complex",3]]]],[11,"fmt","","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"mul_add_assign","","",9,[[["complex",3]]]],[11,"mul_add_assign","","",9,[[["complex",3]]]],[11,"from_usize","","",9,[[],[["complex",3],["option",4]]]],[11,"from_isize","","",9,[[],[["complex",3],["option",4]]]],[11,"from_u8","","",9,[[],[["complex",3],["option",4]]]],[11,"from_u16","","",9,[[],[["complex",3],["option",4]]]],[11,"from_u32","","",9,[[],[["complex",3],["option",4]]]],[11,"from_u64","","",9,[[],[["complex",3],["option",4]]]],[11,"from_i8","","",9,[[],[["complex",3],["option",4]]]],[11,"from_i16","","",9,[[],[["complex",3],["option",4]]]],[11,"from_i32","","",9,[[],[["complex",3],["option",4]]]],[11,"from_i64","","",9,[[],[["complex",3],["option",4]]]],[11,"from_u128","","",9,[[],[["complex",3],["option",4]]]],[11,"from_i128","","",9,[[],[["complex",3],["option",4]]]],[11,"from_f32","","",9,[[],[["complex",3],["option",4]]]],[11,"from_f64","","",9,[[],[["complex",3],["option",4]]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",9,[[],[["complex",3],["result",4]]]],[11,"fmt","","",9,[[["formatter",3]],[["result",4],["error",3]]]],[11,"sum","","",9,[[],["complex",3]]],[11,"sum","","",9,[[],["complex",3]]],[11,"rem_assign","","",9,[[]]],[11,"rem_assign","","",9,[[]]],[11,"rem_assign","","",9,[[["complex",3]]]],[11,"rem_assign","","",9,[[["complex",3]]]],[11,"table","basic_dsp::conv_types","Allows to inspect the generated lookup table",107,[[]]],[11,"delta","","Gets the delta value which determines the resolution",107,[[]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",107,[[],["realtimelineartablelookup",3]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",107,[[["realimpulseresponse",8]],["realtimelineartablelookup",3]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",107,[[],["realtimelineartablelookup",3]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",107,[[["realimpulseresponse",8]],["realtimelineartablelookup",3]]],[11,"to_complex","","Convert the lookup table into complex number space",107,[[],["complextimelineartablelookup",3]]],[11,"to_complex","","Convert the lookup table into complex number space",107,[[],["complextimelineartablelookup",3]]],[11,"fft","","Convert the lookup table into a magnitude spectrum",107,[[],["realfrequencylineartablelookup",3]]],[11,"fft","","Convert the lookup table into a magnitude spectrum",107,[[],["realfrequencylineartablelookup",3]]],[11,"table","","Allows to inspect the generated lookup table",108,[[]]],[11,"delta","","Gets the delta value which determines the resolution",108,[[]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",108,[[],["realfrequencylineartablelookup",3]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",108,[[["realfrequencyresponse",8]],["realfrequencylineartablelookup",3]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",108,[[],["realfrequencylineartablelookup",3]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",108,[[["realfrequencyresponse",8]],["realfrequencylineartablelookup",3]]],[11,"to_complex","","Convert the lookup table into complex number space",108,[[],["complexfrequencylineartablelookup",3]]],[11,"to_complex","","Convert the lookup table into complex number space",108,[[],["complexfrequencylineartablelookup",3]]],[11,"table","","Allows to inspect the generated lookup table",109,[[]]],[11,"delta","","Gets the delta value which determines the resolution",109,[[]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",109,[[],["complextimelineartablelookup",3]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",109,[[["compleximpulseresponse",8]],["complextimelineartablelookup",3]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",109,[[],["complextimelineartablelookup",3]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",109,[[["compleximpulseresponse",8]],["complextimelineartablelookup",3]]],[11,"to_real","","Convert the lookup table into real number space",109,[[],["realtimelineartablelookup",3]]],[11,"to_real","","Convert the lookup table into real number space",109,[[],["realtimelineartablelookup",3]]],[11,"fft","","Convert the lookup table into frequency domain",109,[[],["complexfrequencylineartablelookup",3]]],[11,"fft","","Convert the lookup table into frequency domain",109,[[],["complexfrequencylineartablelookup",3]]],[11,"table","","Allows to inspect the generated lookup table",110,[[]]],[11,"delta","","Gets the delta value which determines the resolution",110,[[]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",110,[[],["complexfrequencylineartablelookup",3]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",110,[[["complexfrequencyresponse",8]],["complexfrequencylineartablelookup",3]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",110,[[],["complexfrequencylineartablelookup",3]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",110,[[["complexfrequencyresponse",8]],["complexfrequencylineartablelookup",3]]],[11,"to_real","","Convert the lookup table into real number space",110,[[],["realfrequencylineartablelookup",3]]],[11,"to_real","","Convert the lookup table into real number space",110,[[],["realfrequencylineartablelookup",3]]],[11,"ifft","","Convert the lookup table into time domain",110,[[],["complextimelineartablelookup",3]]],[11,"ifft","","Convert the lookup table into time domain",110,[[],["complextimelineartablelookup",3]]],[11,"new","","Creates a raised cosine function.",111,[[],["raisedcosinefunction",3]]],[11,"new","","Creates a sinc function.",112,[[],["sincfunction",3]]],[11,"new","basic_dsp::window_functions","Creates a new Hamming window",118,[[],["hammingwindow",3]]],[11,"default","","Creates the default Hamming window as defined in GNU Octave.",118,[[],["hammingwindow",3]]],[11,"new","basic_dsp::numbers","Create a new Complex",9,[[],["complex",3]]],[11,"i","","Returns imaginary unit",9,[[],["complex",3]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn\'t…",9,[[]]],[11,"scale","","Multiplies `self` by the scalar `t`.",9,[[],["complex",3]]],[11,"unscale","","Divides `self` by the scalar `t`.",9,[[],["complex",3]]],[11,"powu","","Raises `self` to an unsigned integer power.",9,[[],["complex",3]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",9,[[],["complex",3]]],[11,"inv","","Returns `1/self`",9,[[],["complex",3]]],[11,"powi","","Raises `self` to a signed integer power.",9,[[],["complex",3]]],[11,"l1_norm","","Returns the L1 norm `|re| + |im|` -- the Manhattan…",9,[[]]],[11,"norm","","Calculate |self|",9,[[]]],[11,"arg","","Calculate the principal Arg of self.",9,[[]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r *…",9,[[]]],[11,"from_polar","","Convert a polar representation into a complex number.",9,[[],["complex",3]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural…",9,[[],["complex",3]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",9,[[],["complex",3]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",9,[[],["complex",3]]],[11,"cbrt","","Computes the principal value of the cube root of `self`.",9,[[],["complex",3]]],[11,"powf","","Raises `self` to a floating point power.",9,[[],["complex",3]]],[11,"log","","Returns the logarithm of `self` with respect to an…",9,[[],["complex",3]]],[11,"powc","","Raises `self` to a complex power.",9,[[["complex",3]],["complex",3]]],[11,"expf","","Raises a floating point number to the complex power `self`.",9,[[],["complex",3]]],[11,"sin","","Computes the sine of `self`.",9,[[],["complex",3]]],[11,"cos","","Computes the cosine of `self`.",9,[[],["complex",3]]],[11,"tan","","Computes the tangent of `self`.",9,[[],["complex",3]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",9,[[],["complex",3]]],[11,"acos","","Computes the principal value of the inverse cosine of…",9,[[],["complex",3]]],[11,"atan","","Computes the principal value of the inverse tangent of…",9,[[],["complex",3]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",9,[[],["complex",3]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",9,[[],["complex",3]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",9,[[],["complex",3]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of…",9,[[],["complex",3]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine…",9,[[],["complex",3]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent…",9,[[],["complex",3]]],[11,"finv","","Returns `1/self` using floating-point operations.",9,[[],["complex",3]]],[11,"fdiv","","Returns `self/other` using floating-point operations.",9,[[["complex",3]],["complex",3]]],[11,"is_nan","","Checks if the given complex number is NaN",9,[[]]],[11,"is_infinite","","Checks if the given complex number is infinite",9,[[]]],[11,"is_finite","","Checks if the given complex number is finite",9,[[]]],[11,"is_normal","","Checks if the given complex number is normal",9,[[]]],[11,"default","basic_dsp","Creates multi core settings with default values",13,[[],["multicoresettings",3]]],[11,"single_threaded","","Creates multi core settings so that no thread will be…",13,[[],["multicoresettings",3]]],[11,"parallel","","Creates multi core so that threads will be spawned if this…",13,[[],["multicoresettings",3]]],[11,"new","","Creates multi core settings with the given values.",13,[[],["multicoresettings",3]]],[11,"with_thresholds","","Creates multi core settings with explicit thresholds.",13,[[],["multicoresettings",3]]],[11,"new","","Creates a new buffer from a storage type. The buffer will…",121,[[],["fixedlenbuffer",3]]],[11,"convolve_mat","","Convolves a vector of vectors (in this lib also considered…",16,[[],[["result",4],["errorreason",4]]]],[11,"is_erroneous","","Indicates whether or not the operations on this vector…",16,[[]]],[11,"new","","Creates a new buffer which is ready to be passed around.",127,[[],["singlebuffer",3]]],[11,"with_capacity","","Creates a new buffer which is ready to be passed around.",127,[[],["singlebuffer",3]]]],"p":[[8,"RealImpulseResponse"],[8,"RealFrequencyResponse"],[8,"ComplexImpulseResponse"],[8,"ComplexFrequencyResponse"],[3,"RealOrComplex"],[3,"TimeOrFreq"],[8,"WindowFunction"],[8,"ToSimd"],[8,"Zero"],[3,"Complex"],[8,"Float"],[8,"Num"],[8,"One"],[3,"MultiCoreSettings"],[8,"NumberSpace"],[8,"Domain"],[3,"DspVec"],[8,"ToSlice"],[8,"ToSliceMut"],[8,"Resize"],[8,"ToDspVector"],[8,"ToRealVector"],[8,"ToComplexVector"],[8,"FromVectorFloat"],[8,"FromVector"],[8,"Buffer"],[8,"BufferBorrow"],[8,"MetaData"],[8,"InterleaveToVector"],[8,"ToDspVectorPar"],[8,"ToRealVectorPar"],[8,"ToComplexVectorPar"],[8,"FloatIndex"],[8,"FloatIndexMut"],[8,"ComplexIndex"],[8,"ComplexIndexMut"],[8,"ResizeOps"],[8,"ResizeBufferedOps"],[8,"Vector"],[8,"GetMetaData"],[8,"RededicateForceOps"],[8,"ToRealResult"],[8,"ComplexToRealTransformsOps"],[8,"ComplexToRealTransformsOpsBuffered"],[8,"ComplexToRealGetterOps"],[8,"ComplexToRealSetterOps"],[8,"ComplexOps"],[8,"InsertZerosOps"],[8,"InsertZerosOpsBuffered"],[8,"ToComplexResult"],[8,"RealToComplexTransformsOps"],[8,"RealToComplexTransformsOpsBuffered"],[8,"RealOps"],[8,"ModuloOps"],[8,"ApproximatedOps"],[8,"ToTimeResult"],[8,"ToFreqResult"],[8,"FrequencyDomainOperations"],[8,"TimeDomainOperations"],[8,"ScaleOps"],[8,"ToRealTimeResult"],[8,"ElementaryOps"],[8,"FrequencyToTimeDomainOperations"],[8,"ReorganizeDataOps"],[8,"TimeToFrequencyDomainOperations"],[8,"SymmetricTimeToFrequencyDomainOperations"],[8,"SymmetricFrequencyToTimeDomainOperations"],[8,"CrossCorrelationArgumentOps"],[8,"CrossCorrelationOps"],[8,"Convolution"],[8,"ConvolutionOps"],[8,"FrequencyMultiplication"],[8,"InterpolationOps"],[8,"RealInterpolationOps"],[8,"RededicateOps"],[8,"RededicateToOps"],[8,"Stats"],[8,"OffsetOps"],[8,"ElementaryWrapAroundOps"],[8,"TrigOps"],[8,"PowerOps"],[8,"SplitOps"],[8,"MergeOps"],[8,"DiffSumOps"],[8,"DotProductOps"],[8,"PreciseDotProductOps"],[8,"MapInplaceOps"],[8,"MapAggregateOps"],[8,"StatisticsOps"],[8,"StatisticsSplitOps"],[8,"SumOps"],[8,"PreciseStatisticsOps"],[8,"PreciseStatisticsSplitOps"],[8,"PreciseSumOps"],[8,"PreciseStats"],[4,"ErrorReason"],[4,"PaddingOption"],[3,"Statistics"],[4,"DataDomain"],[8,"Matrix"],[8,"ToMatrix"],[8,"ToDspMatrix"],[8,"ToRealTimeMatrix"],[8,"ToRealFreqMatrix"],[8,"ToComplexTimeMatrix"],[8,"ToComplexFreqMatrix"],[8,"FromMatrix"],[3,"RealTimeLinearTableLookup"],[3,"RealFrequencyLinearTableLookup"],[3,"ComplexTimeLinearTableLookup"],[3,"ComplexFrequencyLinearTableLookup"],[3,"RaisedCosineFunction"],[3,"SincFunction"],[3,"Real"],[3,"Complex"],[3,"Time"],[3,"Freq"],[3,"TriangularWindow"],[3,"HammingWindow"],[3,"BlackmanHarrisWindow"],[3,"RectangularWindow"],[3,"FixedLenBuffer"],[3,"NoTradeBufferBurrow"],[3,"FixedLenBufferBurrow"],[3,"SingleBufferBurrow"],[3,"NoBuffer"],[3,"NoBufferBurrow"],[3,"SingleBuffer"],[3,"TypeMetaData"],[3,"MatrixMxN"],[3,"Matrix2xN"],[3,"Matrix3xN"],[3,"Matrix4xN"]]},\
"basic_dsp_matrix":{"doc":"In this lib a matrix is simply a collection of vectors.…","i":[[3,"MatrixMxN","basic_dsp_matrix","A matrix which can hold 1 to N vectors.",null,null],[3,"Matrix2xN","","A matrix which can hold exactly 2 vectors.",null,null],[3,"Matrix3xN","","A matrix which can hold exactly 3 vectors.",null,null],[3,"Matrix4xN","","A matrix which can hold exactly 4 vectors.",null,null],[6,"Matrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating…",null,null],[6,"Matrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating…",null,null],[6,"RealTimeMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating…",null,null],[6,"RealTimeMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating…",null,null],[6,"ComplexTimeMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating…",null,null],[6,"ComplexTimeMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating…",null,null],[6,"RealFreqMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating…",null,null],[6,"RealFreqMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating…",null,null],[6,"ComplexFreqMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating…",null,null],[6,"ComplexFreqMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating…",null,null],[6,"Matrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit…",null,null],[6,"Matrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit…",null,null],[6,"RealTimeMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit…",null,null],[6,"RealTimeMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit…",null,null],[6,"ComplexTimeMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit…",null,null],[6,"ComplexTimeMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit…",null,null],[6,"RealFreqMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit…",null,null],[6,"RealFreqMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit…",null,null],[6,"ComplexFreqMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit…",null,null],[6,"ComplexFreqMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit…",null,null],[6,"Matrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit…",null,null],[6,"Matrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit…",null,null],[6,"RealTimeMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit…",null,null],[6,"RealTimeMatrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit…",null,null],[6,"ComplexTimeMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit…",null,null],[6,"ComplexTimeMatrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit…",null,null],[6,"RealFreqMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit…",null,null],[6,"RealFreqMatrix64x3","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[6,"ComplexFreqMatrix32x3","","A matrix which can hold exactly 4 vectors of 32 bit…",null,null],[6,"ComplexFreqMatrix64x3","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[6,"Matrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit…",null,null],[6,"Matrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[6,"RealTimeMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit…",null,null],[6,"RealTimeMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[6,"ComplexTimeMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit…",null,null],[6,"ComplexTimeMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[6,"RealFreqMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit…",null,null],[6,"RealFreqMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[6,"ComplexFreqMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit…",null,null],[6,"ComplexFreqMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit…",null,null],[8,"Matrix","","A trait for matrix types. In this lib a matrix is simply a…",null,null],[10,"delta","","The x-axis delta. If `domain` is time domain then `delta`…",0,[[]]],[10,"set_delta","","Sets the x-axis delta. If `domain` is time domain then…",0,[[]]],[10,"row_len","","The number of valid elements in each row of the matrix.…",0,[[]]],[10,"row_points","","The number of valid points in a row. If the matrix is…",0,[[]]],[10,"col_len","","The number of columns in the matrix.",0,[[]]],[10,"rows","","Gets the rows as vectors.",0,[[]]],[10,"rows_mut","","Gets the rows as mutable vectors.",0,[[]]],[8,"ToMatrix","","Conversion from a collection of vectors to a matrix.",null,null],[16,"Output","","",1,null],[10,"to_mat","","Create a new matrix from a collection of vectors.",1,[[]]],[8,"ToDspMatrix","","Conversion from a generic data type into a dsp matrix…",null,null],[16,"Output","","",2,null],[10,"to_gen_dsp_mat","","Create a new generic matrix. `delta` can be changed after…",2,[[["datadomain",4]]]],[8,"ToRealTimeMatrix","","Conversion from a generic data type into a dsp matrix with…",null,null],[16,"Output","","",3,null],[10,"to_real_time_mat","","Create a new matrix in real number space and time domain.…",3,[[]]],[8,"ToRealFreqMatrix","","Conversion from a generic data type into a dsp matrix with…",null,null],[16,"Output","","",4,null],[10,"to_real_freq_mat","","Create a new vector in real number space and frequency…",4,[[]]],[8,"ToComplexTimeMatrix","","Conversion from a generic data type into a dsp vector with…",null,null],[16,"Output","","",5,null],[10,"to_complex_time_mat","","Create a new matrix in complex number space and time…",5,[[]]],[8,"ToComplexFreqMatrix","","Conversion from a generic data type into a dsp vector with…",null,null],[16,"Output","","",6,null],[10,"to_complex_freq_mat","","Create a new matrix in complex number space and frequency…",6,[[]]],[8,"FromMatrix","","Retrieves the underlying storage from a matrix.",null,null],[16,"Output","","Type of the underlying storage of a matrix.",7,null],[10,"get","","Gets the underlying matrix and the number of elements…",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"delta","","",8,[[]]],[11,"set_delta","","",8,[[]]],[11,"row_len","","",8,[[]]],[11,"row_points","","",8,[[]]],[11,"col_len","","",8,[[]]],[11,"rows","","",8,[[]]],[11,"rows_mut","","",8,[[]]],[11,"delta","","",9,[[]]],[11,"set_delta","","",9,[[]]],[11,"row_len","","",9,[[]]],[11,"row_points","","",9,[[]]],[11,"col_len","","",9,[[]]],[11,"rows","","",9,[[]]],[11,"rows_mut","","",9,[[]]],[11,"delta","","",10,[[]]],[11,"set_delta","","",10,[[]]],[11,"row_len","","",10,[[]]],[11,"row_points","","",10,[[]]],[11,"col_len","","",10,[[]]],[11,"rows","","",10,[[]]],[11,"rows_mut","","",10,[[]]],[11,"delta","","",11,[[]]],[11,"set_delta","","",11,[[]]],[11,"row_len","","",11,[[]]],[11,"row_points","","",11,[[]]],[11,"col_len","","",11,[[]]],[11,"rows","","",11,[[]]],[11,"rows_mut","","",11,[[]]],[11,"get","","",8,[[]]],[11,"get","","",9,[[]]],[11,"get","","",10,[[]]],[11,"get","","",11,[[]]],[11,"domain","","",8,[[],["datadomain",4]]],[11,"is_complex","","",8,[[]]],[11,"domain","","",9,[[],["datadomain",4]]],[11,"is_complex","","",9,[[]]],[11,"domain","","",10,[[],["datadomain",4]]],[11,"is_complex","","",10,[[]]],[11,"domain","","",11,[[],["datadomain",4]]],[11,"is_complex","","",11,[[]]],[11,"resize","","",8,[[],["voidresult",6]]],[11,"resize","","",9,[[],["voidresult",6]]],[11,"resize","","",10,[[],["voidresult",6]]],[11,"resize","","",11,[[],["voidresult",6]]],[11,"get_meta_data","","",8,[[],["typemetadata",3]]],[11,"get_meta_data","","",9,[[],["typemetadata",3]]],[11,"get_meta_data","","",10,[[],["typemetadata",3]]],[11,"get_meta_data","","",11,[[],["typemetadata",3]]],[11,"magnitude","","",8,[[]]],[11,"magnitude_squared","","",8,[[]]],[11,"to_real","","",8,[[]]],[11,"to_imag","","",8,[[]]],[11,"phase","","",8,[[]]],[11,"magnitude","","",9,[[]]],[11,"magnitude_squared","","",9,[[]]],[11,"to_real","","",9,[[]]],[11,"to_imag","","",9,[[]]],[11,"phase","","",9,[[]]],[11,"magnitude","","",10,[[]]],[11,"magnitude_squared","","",10,[[]]],[11,"to_real","","",10,[[]]],[11,"to_imag","","",10,[[]]],[11,"phase","","",10,[[]]],[11,"magnitude","","",11,[[]]],[11,"magnitude_squared","","",11,[[]]],[11,"to_real","","",11,[[]]],[11,"to_imag","","",11,[[]]],[11,"phase","","",11,[[]]],[11,"magnitude_b","","",8,[[]]],[11,"magnitude_squared_b","","",8,[[]]],[11,"to_real_b","","",8,[[]]],[11,"to_imag_b","","",8,[[]]],[11,"phase_b","","",8,[[]]],[11,"magnitude_b","","",9,[[]]],[11,"magnitude_squared_b","","",9,[[]]],[11,"to_real_b","","",9,[[]]],[11,"to_imag_b","","",9,[[]]],[11,"phase_b","","",9,[[]]],[11,"magnitude_b","","",10,[[]]],[11,"magnitude_squared_b","","",10,[[]]],[11,"to_real_b","","",10,[[]]],[11,"to_imag_b","","",10,[[]]],[11,"phase_b","","",10,[[]]],[11,"magnitude_b","","",11,[[]]],[11,"magnitude_squared_b","","",11,[[]]],[11,"to_real_b","","",11,[[]]],[11,"to_imag_b","","",11,[[]]],[11,"phase_b","","",11,[[]]],[11,"get_real","","",8,[[]]],[11,"get_imag","","",8,[[]]],[11,"get_magnitude","","",8,[[]]],[11,"get_magnitude_squared","","",8,[[]]],[11,"get_phase","","",8,[[]]],[11,"get_real_imag","","",8,[[]]],[11,"get_mag_phase","","",8,[[]]],[11,"get_real","","",9,[[]]],[11,"get_imag","","",9,[[]]],[11,"get_magnitude","","",9,[[]]],[11,"get_magnitude_squared","","",9,[[]]],[11,"get_phase","","",9,[[]]],[11,"get_real_imag","","",9,[[]]],[11,"get_mag_phase","","",9,[[]]],[11,"get_real","","",10,[[]]],[11,"get_imag","","",10,[[]]],[11,"get_magnitude","","",10,[[]]],[11,"get_magnitude_squared","","",10,[[]]],[11,"get_phase","","",10,[[]]],[11,"get_real_imag","","",10,[[]]],[11,"get_mag_phase","","",10,[[]]],[11,"get_real","","",11,[[]]],[11,"get_imag","","",11,[[]]],[11,"get_magnitude","","",11,[[]]],[11,"get_magnitude_squared","","",11,[[]]],[11,"get_phase","","",11,[[]]],[11,"get_real_imag","","",11,[[]]],[11,"get_mag_phase","","",11,[[]]],[11,"set_real_imag","","",8,[[],["voidresult",6]]],[11,"set_mag_phase","","",8,[[],["voidresult",6]]],[11,"set_real_imag","","",9,[[],["voidresult",6]]],[11,"set_mag_phase","","",9,[[],["voidresult",6]]],[11,"set_real_imag","","",10,[[],["voidresult",6]]],[11,"set_mag_phase","","",10,[[],["voidresult",6]]],[11,"set_real_imag","","",11,[[],["voidresult",6]]],[11,"set_mag_phase","","",11,[[],["voidresult",6]]],[11,"multiply_complex_exponential","","",8,[[]]],[11,"conj","","",8,[[]]],[11,"multiply_complex_exponential","","",9,[[]]],[11,"conj","","",9,[[]]],[11,"multiply_complex_exponential","","",10,[[]]],[11,"conj","","",10,[[]]],[11,"multiply_complex_exponential","","",11,[[]]],[11,"conj","","",11,[[]]],[11,"to_complex","","",8,[[],["transres",6]]],[11,"to_complex","","",9,[[],["transres",6]]],[11,"to_complex","","",10,[[],["transres",6]]],[11,"to_complex","","",11,[[],["transres",6]]],[11,"to_complex_b","","",8,[[]]],[11,"to_complex_b","","",9,[[]]],[11,"to_complex_b","","",10,[[]]],[11,"to_complex_b","","",11,[[]]],[11,"abs","","",8,[[]]],[11,"abs","","",9,[[]]],[11,"abs","","",10,[[]]],[11,"abs","","",11,[[]]],[11,"wrap","","",8,[[]]],[11,"unwrap","","",8,[[]]],[11,"wrap","","",9,[[]]],[11,"unwrap","","",9,[[]]],[11,"wrap","","",10,[[]]],[11,"unwrap","","",10,[[]]],[11,"wrap","","",11,[[]]],[11,"unwrap","","",11,[[]]],[11,"ln_approx","","",8,[[]]],[11,"exp_approx","","",8,[[]]],[11,"sin_approx","","",8,[[]]],[11,"cos_approx","","",8,[[]]],[11,"log_approx","","",8,[[]]],[11,"expf_approx","","",8,[[]]],[11,"powf_approx","","",8,[[]]],[11,"ln_approx","","",9,[[]]],[11,"exp_approx","","",9,[[]]],[11,"sin_approx","","",9,[[]]],[11,"cos_approx","","",9,[[]]],[11,"log_approx","","",9,[[]]],[11,"expf_approx","","",9,[[]]],[11,"powf_approx","","",9,[[]]],[11,"ln_approx","","",10,[[]]],[11,"exp_approx","","",10,[[]]],[11,"sin_approx","","",10,[[]]],[11,"cos_approx","","",10,[[]]],[11,"log_approx","","",10,[[]]],[11,"expf_approx","","",10,[[]]],[11,"powf_approx","","",10,[[]]],[11,"ln_approx","","",11,[[]]],[11,"exp_approx","","",11,[[]]],[11,"sin_approx","","",11,[[]]],[11,"cos_approx","","",11,[[]]],[11,"log_approx","","",11,[[]]],[11,"expf_approx","","",11,[[]]],[11,"powf_approx","","",11,[[]]],[11,"mirror","","",8,[[]]],[11,"fft_shift","","",8,[[]]],[11,"ifft_shift","","",8,[[]]],[11,"mirror","","",9,[[]]],[11,"fft_shift","","",9,[[]]],[11,"ifft_shift","","",9,[[]]],[11,"mirror","","",10,[[]]],[11,"fft_shift","","",10,[[]]],[11,"ifft_shift","","",10,[[]]],[11,"mirror","","",11,[[]]],[11,"fft_shift","","",11,[[]]],[11,"ifft_shift","","",11,[[]]],[11,"apply_window","","",8,[[["windowfunction",8]]]],[11,"unapply_window","","",8,[[["windowfunction",8]]]],[11,"apply_window","","",9,[[["windowfunction",8]]]],[11,"unapply_window","","",9,[[["windowfunction",8]]]],[11,"apply_window","","",10,[[["windowfunction",8]]]],[11,"unapply_window","","",10,[[["windowfunction",8]]]],[11,"apply_window","","",11,[[["windowfunction",8]]]],[11,"unapply_window","","",11,[[["windowfunction",8]]]],[11,"plain_fft","","",8,[[]]],[11,"fft","","",8,[[]]],[11,"windowed_fft","","",8,[[["windowfunction",8]]]],[11,"plain_fft","","",9,[[]]],[11,"fft","","",9,[[]]],[11,"windowed_fft","","",9,[[["windowfunction",8]]]],[11,"plain_fft","","",10,[[]]],[11,"fft","","",10,[[]]],[11,"windowed_fft","","",10,[[["windowfunction",8]]]],[11,"plain_fft","","",11,[[]]],[11,"fft","","",11,[[]]],[11,"windowed_fft","","",11,[[["windowfunction",8]]]],[11,"plain_sfft","","",8,[[],["transres",6]]],[11,"sfft","","",8,[[],["transres",6]]],[11,"windowed_sfft","","",8,[[["windowfunction",8]],["transres",6]]],[11,"plain_sfft","","",9,[[],["transres",6]]],[11,"sfft","","",9,[[],["transres",6]]],[11,"windowed_sfft","","",9,[[["windowfunction",8]],["transres",6]]],[11,"plain_sfft","","",10,[[],["transres",6]]],[11,"sfft","","",10,[[],["transres",6]]],[11,"windowed_sfft","","",10,[[["windowfunction",8]],["transres",6]]],[11,"plain_sfft","","",11,[[],["transres",6]]],[11,"sfft","","",11,[[],["transres",6]]],[11,"windowed_sfft","","",11,[[["windowfunction",8]],["transres",6]]],[11,"plain_ifft","","",8,[[]]],[11,"ifft","","",8,[[]]],[11,"windowed_ifft","","",8,[[["windowfunction",8]]]],[11,"plain_ifft","","",9,[[]]],[11,"ifft","","",9,[[]]],[11,"windowed_ifft","","",9,[[["windowfunction",8]]]],[11,"plain_ifft","","",10,[[]]],[11,"ifft","","",10,[[]]],[11,"windowed_ifft","","",10,[[["windowfunction",8]]]],[11,"plain_ifft","","",11,[[]]],[11,"ifft","","",11,[[]]],[11,"windowed_ifft","","",11,[[["windowfunction",8]]]],[11,"plain_sifft","","",8,[[],["transres",6]]],[11,"sifft","","",8,[[],["transres",6]]],[11,"windowed_sifft","","",8,[[["windowfunction",8]],["transres",6]]],[11,"plain_sifft","","",9,[[],["transres",6]]],[11,"sifft","","",9,[[],["transres",6]]],[11,"windowed_sifft","","",9,[[["windowfunction",8]],["transres",6]]],[11,"plain_sifft","","",10,[[],["transres",6]]],[11,"sifft","","",10,[[],["transres",6]]],[11,"windowed_sifft","","",10,[[["windowfunction",8]],["transres",6]]],[11,"plain_sifft","","",11,[[],["transres",6]]],[11,"sifft","","",11,[[],["transres",6]]],[11,"windowed_sifft","","",11,[[["windowfunction",8]],["transres",6]]],[11,"prepare_argument","","",8,[[]]],[11,"prepare_argument_padded","","",8,[[]]],[11,"prepare_argument","","",9,[[]]],[11,"prepare_argument_padded","","",9,[[]]],[11,"prepare_argument","","",10,[[]]],[11,"prepare_argument_padded","","",10,[[]]],[11,"prepare_argument","","",11,[[]]],[11,"prepare_argument_padded","","",11,[[]]],[11,"correlate","","",8,[[],["voidresult",6]]],[11,"correlate","","",9,[[],["voidresult",6]]],[11,"correlate","","",10,[[],["voidresult",6]]],[11,"correlate","","",11,[[],["voidresult",6]]],[11,"convolve","","",8,[[["realimpulseresponse",8]]]],[11,"convolve","","",8,[[["compleximpulseresponse",8]]]],[11,"convolve","","",9,[[["realimpulseresponse",8]]]],[11,"convolve","","",9,[[["compleximpulseresponse",8]]]],[11,"convolve","","",10,[[["realimpulseresponse",8]]]],[11,"convolve","","",10,[[["compleximpulseresponse",8]]]],[11,"convolve","","",11,[[["realimpulseresponse",8]]]],[11,"convolve","","",11,[[["compleximpulseresponse",8]]]],[11,"convolve_signal","","",8,[[["dspvec",3]],["voidresult",6]]],[11,"convolve_signal","","",9,[[["dspvec",3]],["voidresult",6]]],[11,"convolve_signal","","",10,[[["dspvec",3]],["voidresult",6]]],[11,"convolve_signal","","",11,[[["dspvec",3]],["voidresult",6]]],[11,"convolve_signal","","",8,[[["vec",3]],["voidresult",6]]],[11,"convolve_signal","","",9,[[],["voidresult",6]]],[11,"convolve_signal","","",10,[[],["voidresult",6]]],[11,"convolve_signal","","",11,[[],["voidresult",6]]],[11,"multiply_frequency_response","","",8,[[["realfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",8,[[["complexfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",9,[[["realfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",9,[[["complexfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",10,[[["realfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",10,[[["complexfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",11,[[["realfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",11,[[["complexfrequencyresponse",8]]]],[11,"interpolatef","","",8,[[["realimpulseresponse",8]]]],[11,"interpolatei","","",8,[[["realfrequencyresponse",8]],["voidresult",6]]],[11,"interpolate","","",8,[[["option",4],["realfrequencyresponse",8]],["voidresult",6]]],[11,"interpft","","",8,[[]]],[11,"decimatei","","",8,[[]]],[11,"interpolatef","","",9,[[["realimpulseresponse",8]]]],[11,"interpolatei","","",9,[[["realfrequencyresponse",8]],["voidresult",6]]],[11,"interpolate","","",9,[[["option",4],["realfrequencyresponse",8]],["voidresult",6]]],[11,"interpft","","",9,[[]]],[11,"decimatei","","",9,[[]]],[11,"interpolatef","","",10,[[["realimpulseresponse",8]]]],[11,"interpolatei","","",10,[[["realfrequencyresponse",8]],["voidresult",6]]],[11,"interpolate","","",10,[[["option",4],["realfrequencyresponse",8]],["voidresult",6]]],[11,"interpft","","",10,[[]]],[11,"decimatei","","",10,[[]]],[11,"interpolatef","","",11,[[["realimpulseresponse",8]]]],[11,"interpolatei","","",11,[[["realfrequencyresponse",8]],["voidresult",6]]],[11,"interpolate","","",11,[[["option",4],["realfrequencyresponse",8]],["voidresult",6]]],[11,"interpft","","",11,[[]]],[11,"decimatei","","",11,[[]]],[11,"interpolate_hermite","","",8,[[]]],[11,"interpolate_lin","","",8,[[]]],[11,"interpolate_hermite","","",9,[[]]],[11,"interpolate_lin","","",9,[[]]],[11,"interpolate_hermite","","",10,[[]]],[11,"interpolate_lin","","",10,[[]]],[11,"interpolate_hermite","","",11,[[]]],[11,"interpolate_lin","","",11,[[]]],[11,"rededicate_from_force","","",8,[[["matrixmxn",3]]]],[11,"rededicate_with_runtime_data","","",8,[[["datadomain",4],["matrixmxn",3]]]],[11,"rededicate_from_force","","",9,[[["matrix2xn",3]]]],[11,"rededicate_with_runtime_data","","",9,[[["datadomain",4],["matrix2xn",3]]]],[11,"rededicate_from_force","","",10,[[["matrix3xn",3]]]],[11,"rededicate_with_runtime_data","","",10,[[["matrix3xn",3],["datadomain",4]]]],[11,"rededicate_from_force","","",11,[[["matrix4xn",3]]]],[11,"rededicate_with_runtime_data","","",11,[[["matrix4xn",3],["datadomain",4]]]],[11,"scale","","",8,[[]]],[11,"scale","","",8,[[["complex",3]]]],[11,"scale","","",9,[[]]],[11,"scale","","",9,[[["complex",3]]]],[11,"scale","","",10,[[]]],[11,"scale","","",10,[[["complex",3]]]],[11,"scale","","",11,[[]]],[11,"scale","","",11,[[["complex",3]]]],[11,"offset","","",8,[[]]],[11,"offset","","",8,[[["complex",3]]]],[11,"offset","","",9,[[]]],[11,"offset","","",9,[[["complex",3]]]],[11,"offset","","",10,[[]]],[11,"offset","","",10,[[["complex",3]]]],[11,"offset","","",11,[[]]],[11,"offset","","",11,[[["complex",3]]]],[11,"add","","",8,[[],["voidresult",6]]],[11,"sub","","",8,[[],["voidresult",6]]],[11,"div","","",8,[[],["voidresult",6]]],[11,"mul","","",8,[[],["voidresult",6]]],[11,"add","","",8,[[],["voidresult",6]]],[11,"sub","","",8,[[],["voidresult",6]]],[11,"div","","",8,[[],["voidresult",6]]],[11,"mul","","",8,[[],["voidresult",6]]],[11,"add","","",9,[[],["voidresult",6]]],[11,"sub","","",9,[[],["voidresult",6]]],[11,"div","","",9,[[],["voidresult",6]]],[11,"mul","","",9,[[],["voidresult",6]]],[11,"add","","",9,[[],["voidresult",6]]],[11,"sub","","",9,[[],["voidresult",6]]],[11,"div","","",9,[[],["voidresult",6]]],[11,"mul","","",9,[[],["voidresult",6]]],[11,"add","","",10,[[],["voidresult",6]]],[11,"sub","","",10,[[],["voidresult",6]]],[11,"div","","",10,[[],["voidresult",6]]],[11,"mul","","",10,[[],["voidresult",6]]],[11,"add","","",10,[[],["voidresult",6]]],[11,"sub","","",10,[[],["voidresult",6]]],[11,"div","","",10,[[],["voidresult",6]]],[11,"mul","","",10,[[],["voidresult",6]]],[11,"add","","",11,[[],["voidresult",6]]],[11,"sub","","",11,[[],["voidresult",6]]],[11,"div","","",11,[[],["voidresult",6]]],[11,"mul","","",11,[[],["voidresult",6]]],[11,"add","","",11,[[],["voidresult",6]]],[11,"sub","","",11,[[],["voidresult",6]]],[11,"div","","",11,[[],["voidresult",6]]],[11,"mul","","",11,[[],["voidresult",6]]],[11,"add_smaller","","",8,[[],["voidresult",6]]],[11,"sub_smaller","","",8,[[],["voidresult",6]]],[11,"div_smaller","","",8,[[],["voidresult",6]]],[11,"mul_smaller","","",8,[[],["voidresult",6]]],[11,"add_smaller","","",8,[[],["voidresult",6]]],[11,"sub_smaller","","",8,[[],["voidresult",6]]],[11,"div_smaller","","",8,[[],["voidresult",6]]],[11,"mul_smaller","","",8,[[],["voidresult",6]]],[11,"add_smaller","","",9,[[],["voidresult",6]]],[11,"sub_smaller","","",9,[[],["voidresult",6]]],[11,"div_smaller","","",9,[[],["voidresult",6]]],[11,"mul_smaller","","",9,[[],["voidresult",6]]],[11,"add_smaller","","",9,[[],["voidresult",6]]],[11,"sub_smaller","","",9,[[],["voidresult",6]]],[11,"div_smaller","","",9,[[],["voidresult",6]]],[11,"mul_smaller","","",9,[[],["voidresult",6]]],[11,"add_smaller","","",10,[[],["voidresult",6]]],[11,"sub_smaller","","",10,[[],["voidresult",6]]],[11,"div_smaller","","",10,[[],["voidresult",6]]],[11,"mul_smaller","","",10,[[],["voidresult",6]]],[11,"add_smaller","","",10,[[],["voidresult",6]]],[11,"sub_smaller","","",10,[[],["voidresult",6]]],[11,"div_smaller","","",10,[[],["voidresult",6]]],[11,"mul_smaller","","",10,[[],["voidresult",6]]],[11,"add_smaller","","",11,[[],["voidresult",6]]],[11,"sub_smaller","","",11,[[],["voidresult",6]]],[11,"div_smaller","","",11,[[],["voidresult",6]]],[11,"mul_smaller","","",11,[[],["voidresult",6]]],[11,"add_smaller","","",11,[[],["voidresult",6]]],[11,"sub_smaller","","",11,[[],["voidresult",6]]],[11,"div_smaller","","",11,[[],["voidresult",6]]],[11,"mul_smaller","","",11,[[],["voidresult",6]]],[11,"sin","","",8,[[]]],[11,"cos","","",8,[[]]],[11,"tan","","",8,[[]]],[11,"asin","","",8,[[]]],[11,"acos","","",8,[[]]],[11,"atan","","",8,[[]]],[11,"sinh","","",8,[[]]],[11,"cosh","","",8,[[]]],[11,"tanh","","",8,[[]]],[11,"asinh","","",8,[[]]],[11,"acosh","","",8,[[]]],[11,"atanh","","",8,[[]]],[11,"sin","","",9,[[]]],[11,"cos","","",9,[[]]],[11,"tan","","",9,[[]]],[11,"asin","","",9,[[]]],[11,"acos","","",9,[[]]],[11,"atan","","",9,[[]]],[11,"sinh","","",9,[[]]],[11,"cosh","","",9,[[]]],[11,"tanh","","",9,[[]]],[11,"asinh","","",9,[[]]],[11,"acosh","","",9,[[]]],[11,"atanh","","",9,[[]]],[11,"sin","","",10,[[]]],[11,"cos","","",10,[[]]],[11,"tan","","",10,[[]]],[11,"asin","","",10,[[]]],[11,"acos","","",10,[[]]],[11,"atan","","",10,[[]]],[11,"sinh","","",10,[[]]],[11,"cosh","","",10,[[]]],[11,"tanh","","",10,[[]]],[11,"asinh","","",10,[[]]],[11,"acosh","","",10,[[]]],[11,"atanh","","",10,[[]]],[11,"sin","","",11,[[]]],[11,"cos","","",11,[[]]],[11,"tan","","",11,[[]]],[11,"asin","","",11,[[]]],[11,"acos","","",11,[[]]],[11,"atan","","",11,[[]]],[11,"sinh","","",11,[[]]],[11,"cosh","","",11,[[]]],[11,"tanh","","",11,[[]]],[11,"asinh","","",11,[[]]],[11,"acosh","","",11,[[]]],[11,"atanh","","",11,[[]]],[11,"sqrt","","",8,[[]]],[11,"square","","",8,[[]]],[11,"root","","",8,[[]]],[11,"powf","","",8,[[]]],[11,"ln","","",8,[[]]],[11,"exp","","",8,[[]]],[11,"log","","",8,[[]]],[11,"expf","","",8,[[]]],[11,"sqrt","","",9,[[]]],[11,"square","","",9,[[]]],[11,"root","","",9,[[]]],[11,"powf","","",9,[[]]],[11,"ln","","",9,[[]]],[11,"exp","","",9,[[]]],[11,"log","","",9,[[]]],[11,"expf","","",9,[[]]],[11,"sqrt","","",10,[[]]],[11,"square","","",10,[[]]],[11,"root","","",10,[[]]],[11,"powf","","",10,[[]]],[11,"ln","","",10,[[]]],[11,"exp","","",10,[[]]],[11,"log","","",10,[[]]],[11,"expf","","",10,[[]]],[11,"sqrt","","",11,[[]]],[11,"square","","",11,[[]]],[11,"root","","",11,[[]]],[11,"powf","","",11,[[]]],[11,"ln","","",11,[[]]],[11,"exp","","",11,[[]]],[11,"log","","",11,[[]]],[11,"expf","","",11,[[]]],[11,"reverse","","",8,[[]]],[11,"swap_halves","","",8,[[]]],[11,"reverse","","",9,[[]]],[11,"swap_halves","","",9,[[]]],[11,"reverse","","",10,[[]]],[11,"swap_halves","","",10,[[]]],[11,"reverse","","",11,[[]]],[11,"swap_halves","","",11,[[]]],[11,"diff","","",8,[[]]],[11,"diff_with_start","","",8,[[]]],[11,"cum_sum","","",8,[[]]],[11,"diff","","",9,[[]]],[11,"diff_with_start","","",9,[[]]],[11,"cum_sum","","",9,[[]]],[11,"diff","","",10,[[]]],[11,"diff_with_start","","",10,[[]]],[11,"cum_sum","","",10,[[]]],[11,"diff","","",11,[[]]],[11,"diff_with_start","","",11,[[]]],[11,"cum_sum","","",11,[[]]],[11,"dot_product","","",8,[[["matrixmxn",3]],[["scalarresult",6],["vec",3]]]],[11,"dot_product","","",9,[[["matrix2xn",3]],[["scalarresult",6],["vec",3]]]],[11,"dot_product","","",10,[[["matrix3xn",3]],[["scalarresult",6],["vec",3]]]],[11,"dot_product","","",11,[[["matrix4xn",3]],[["scalarresult",6],["vec",3]]]],[11,"dot_product","","",8,[[],[["scalarresult",6],["vec",3]]]],[11,"dot_product","","",9,[[],["scalarresult",6]]],[11,"dot_product","","",10,[[],["scalarresult",6]]],[11,"dot_product","","",11,[[],["scalarresult",6]]],[11,"dot_product_prec","","",8,[[["matrixmxn",3]],[["scalarresult",6],["vec",3]]]],[11,"dot_product_prec","","",9,[[["matrix2xn",3]],[["scalarresult",6],["vec",3]]]],[11,"dot_product_prec","","",10,[[["matrix3xn",3]],[["scalarresult",6],["vec",3]]]],[11,"dot_product_prec","","",11,[[["matrix4xn",3]],[["scalarresult",6],["vec",3]]]],[11,"dot_product_prec","","",8,[[],[["scalarresult",6],["vec",3]]]],[11,"dot_product_prec","","",9,[[],["scalarresult",6]]],[11,"dot_product_prec","","",10,[[],["scalarresult",6]]],[11,"dot_product_prec","","",11,[[],["scalarresult",6]]],[11,"map_inplace","","",8,[[]]],[11,"map_inplace","","",8,[[]]],[11,"map_inplace","","",9,[[]]],[11,"map_inplace","","",9,[[]]],[11,"map_inplace","","",10,[[]]],[11,"map_inplace","","",10,[[]]],[11,"map_inplace","","",11,[[]]],[11,"map_inplace","","",11,[[]]],[11,"map_aggregate","","",8,[[],[["vec",3],["scalarresult",6]]]],[11,"map_aggregate","","",9,[[],["scalarresult",6]]],[11,"map_aggregate","","",10,[[],["scalarresult",6]]],[11,"map_aggregate","","",11,[[],["scalarresult",6]]],[11,"statistics","","",8,[[],[["statistics",3],["vec",3]]]],[11,"statistics","","",9,[[]]],[11,"statistics","","",10,[[]]],[11,"statistics","","",11,[[]]],[11,"statistics_split","","",8,[[],[["scalarresult",6],["vec",3]]]],[11,"statistics_split","","",9,[[],["scalarresult",6]]],[11,"statistics_split","","",10,[[],["scalarresult",6]]],[11,"statistics_split","","",11,[[],["scalarresult",6]]],[11,"sum","","",8,[[],["vec",3]]],[11,"sum_sq","","",8,[[],["vec",3]]],[11,"sum","","",9,[[]]],[11,"sum_sq","","",9,[[]]],[11,"sum","","",9,[[]]],[11,"sum_sq","","",9,[[]]],[11,"sum","","",9,[[]]],[11,"sum_sq","","",9,[[]]],[11,"statistics_prec","","",8,[[],[["statistics",3],["vec",3]]]],[11,"statistics_prec","","",9,[[]]],[11,"statistics_prec","","",10,[[]]],[11,"statistics_prec","","",11,[[]]],[11,"statistics_split_prec","","",8,[[],[["scalarresult",6],["vec",3]]]],[11,"statistics_split_prec","","",9,[[],["scalarresult",6]]],[11,"statistics_split_prec","","",10,[[],["scalarresult",6]]],[11,"statistics_split_prec","","",11,[[],["scalarresult",6]]],[11,"sum_prec","","",8,[[],["vec",3]]],[11,"sum_sq_prec","","",8,[[],["vec",3]]],[11,"sum_prec","","",9,[[]]],[11,"sum_sq_prec","","",9,[[]]],[11,"sum_prec","","",10,[[]]],[11,"sum_sq_prec","","",10,[[]]],[11,"sum_prec","","",11,[[]]],[11,"sum_sq_prec","","",11,[[]]]],"p":[[8,"Matrix"],[8,"ToMatrix"],[8,"ToDspMatrix"],[8,"ToRealTimeMatrix"],[8,"ToRealFreqMatrix"],[8,"ToComplexTimeMatrix"],[8,"ToComplexFreqMatrix"],[8,"FromMatrix"],[3,"MatrixMxN"],[3,"Matrix2xN"],[3,"Matrix3xN"],[3,"Matrix4xN"]]},\
"basic_dsp_vector":{"doc":"Basic digital signal processing (DSP) operations","i":[[3,"MultiCoreSettings","basic_dsp_vector","Holds parameters which specify how multiple cores are used…",null,null],[12,"core_limit","","All operations will be limited to not create more threads…",0,null],[12,"med_dual_core_threshold","","",0,null],[12,"med_multi_core_threshold","","",0,null],[12,"large_dual_core_threshold","","",0,null],[12,"large_multi_core_threshold","","",0,null],[3,"FixedLenBufferBurrow","","Buffer borrow type for `SingleBuffer`.",null,null],[3,"FixedLenBuffer","","A buffer which gets initalized with a data storage type…",null,null],[3,"SingleBufferBurrow","","Buffer borrow type for `SingleBuffer`.",null,null],[3,"SingleBuffer","","A buffer which stores a single vector and never shrinks.",null,null],[3,"NoBuffer","","This type can be used everytime the API asks for a buffer…",null,null],[3,"NoBufferBurrow","","Buffer borrow type for `NoBuffer`.",null,null],[3,"Statistics","","Statistics about numeric data",null,null],[12,"sum","","Sum of all values",1,null],[12,"count","","How many numbers have been considered for the stats",1,null],[12,"average","","Average value",1,null],[12,"rms","","Root-mean-square or rms over all values.",1,null],[12,"min","","The smallest value.",1,null],[12,"min_index","","The index of the smallest value.",1,null],[12,"max","","The largest value.",1,null],[12,"max_index","","The index of the largest value.",1,null],[3,"DspVec","","A 1xN (one times N elements) or Nx1 data vector as used…",null,null],[12,"data","","The underlying storage. `self.len()` should be called to…",2,null],[3,"TypeMetaData","","Holds meta data about a type.",null,null],[3,"NoTradeBufferBurrow","","Buffer borrow type for `NoTradeBufferBurrow`.",null,null],[4,"ErrorReason","","Enumeration of all error reasons",null,null],[13,"InputMustHaveTheSameSize","","The operations requires all inputs to have the same size,…",3,null],[13,"InputMetaDataMustAgree","","The operations requires all inputs to have the same meta…",3,null],[13,"InputMustBeComplex","","The operation requires the input to be complex.",3,null],[13,"InputMustBeReal","","The operation requires the input to be real.",3,null],[13,"InputMustBeInTimeDomain","","The operation requires the input to be in time domain.",3,null],[13,"InputMustBeInFrequencyDomain","","The operation requires the input to be in frequency domain.",3,null],[13,"InvalidArgumentLength","","The arguments have an invalid length to perform the…",3,null],[13,"InputMustBeConjSymmetric","","The operations is only valid if the data input contains…",3,null],[13,"InputMustHaveAnOddLength","","`self.points()` must be an odd number.",3,null],[13,"ArgumentFunctionMustBeSymmetric","","The function passed as argument must be symmetric",3,null],[13,"InvalidNumberOfArgumentsForCombinedOp","","The number of arguments passed into a combined operation…",3,null],[13,"InputMustNotBeEmpty","","The operation isn\'t specified for an empty vector.",3,null],[13,"InputMustHaveAnEvenLength","","Given input must have an even length.",3,null],[13,"TypeCanNotResize","","The arguments would require that the type allocates larger…",3,null],[4,"PaddingOption","","An option which defines how a vector should be padded",null,null],[13,"End","","Appends zeros to the end of the vector.",4,null],[13,"Surround","","Surrounds the vector with zeros at the beginning and at…",4,null],[13,"Center","","Inserts zeros in the center of the vector",4,null],[4,"DataDomain","","The domain of a data vector",null,null],[13,"Time","","Time domain, the x-axis is in [s].",5,null],[13,"Frequency","","Frequency domain, the x-axis is in [Hz].",5,null],[5,"print_calibration","","Prints debug information about the calibration. The…",null,[[],["string",3]]],[0,"conv_types","","Types around a convolution, see also…",null,null],[3,"RealTimeLinearTableLookup","basic_dsp_vector::conv_types","Allows to create a lookup table with linear interpolation…",null,null],[3,"RealFrequencyLinearTableLookup","","Allows to create a lookup table with linear interpolation…",null,null],[3,"ComplexTimeLinearTableLookup","","Allows to create a lookup table with linear interpolation…",null,null],[3,"ComplexFrequencyLinearTableLookup","","Allows to create a lookup table with linear interpolation…",null,null],[3,"RaisedCosineFunction","","Raised cosine function according to…",null,null],[3,"SincFunction","","Sinc function according to…",null,null],[8,"RealImpulseResponse","","A convolution function in time domain and real number space",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or…",6,[[]]],[10,"calc","","Calculates the convolution for a data point",6,[[]]],[8,"RealFrequencyResponse","","A convolution function in frequency domain and real number…",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or…",7,[[]]],[10,"calc","","Calculates the convolution for a data point",7,[[]]],[8,"ComplexImpulseResponse","","A convolution function in time domain and complex number…",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or…",8,[[]]],[10,"calc","","Calculates the convolution for a data point",8,[[],["complex",3]]],[8,"ComplexFrequencyResponse","","A convolution function in frequency domain and complex…",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or…",9,[[]]],[10,"calc","","Calculates the convolution for a data point",9,[[],["complex",3]]],[11,"table","","Allows to inspect the generated lookup table",10,[[]]],[11,"delta","","Gets the delta value which determines the resolution",10,[[]]],[11,"table","","Allows to inspect the generated lookup table",11,[[]]],[11,"delta","","Gets the delta value which determines the resolution",11,[[]]],[11,"table","","Allows to inspect the generated lookup table",12,[[]]],[11,"delta","","Gets the delta value which determines the resolution",12,[[]]],[11,"table","","Allows to inspect the generated lookup table",13,[[]]],[11,"delta","","Gets the delta value which determines the resolution",13,[[]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",10,[[]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",10,[[["realimpulseresponse",8]]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",10,[[]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",10,[[["realimpulseresponse",8]]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",11,[[]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",11,[[["realfrequencyresponse",8]]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",11,[[]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",11,[[["realfrequencyresponse",8]]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",12,[[]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",12,[[["compleximpulseresponse",8]]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",12,[[]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",12,[[["compleximpulseresponse",8]]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",13,[[]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",13,[[["complexfrequencyresponse",8]]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",13,[[]]],[11,"from_conv_function","","Creates a lookup table from another convolution function.…",13,[[["complexfrequencyresponse",8]]]],[11,"to_complex","","Convert the lookup table into complex number space",10,[[],["complextimelineartablelookup",3]]],[11,"to_complex","","Convert the lookup table into complex number space",10,[[],["complextimelineartablelookup",3]]],[11,"to_complex","","Convert the lookup table into complex number space",11,[[],["complexfrequencylineartablelookup",3]]],[11,"to_complex","","Convert the lookup table into complex number space",11,[[],["complexfrequencylineartablelookup",3]]],[11,"to_real","","Convert the lookup table into real number space",12,[[],["realtimelineartablelookup",3]]],[11,"to_real","","Convert the lookup table into real number space",12,[[],["realtimelineartablelookup",3]]],[11,"to_real","","Convert the lookup table into real number space",13,[[],["realfrequencylineartablelookup",3]]],[11,"to_real","","Convert the lookup table into real number space",13,[[],["realfrequencylineartablelookup",3]]],[11,"fft","","Convert the lookup table into frequency domain",12,[[],["complexfrequencylineartablelookup",3]]],[11,"fft","","Convert the lookup table into frequency domain",12,[[],["complexfrequencylineartablelookup",3]]],[11,"fft","","Convert the lookup table into a magnitude spectrum",10,[[],["realfrequencylineartablelookup",3]]],[11,"fft","","Convert the lookup table into a magnitude spectrum",10,[[],["realfrequencylineartablelookup",3]]],[11,"ifft","","Convert the lookup table into time domain",13,[[],["complextimelineartablelookup",3]]],[11,"ifft","","Convert the lookup table into time domain",13,[[],["complextimelineartablelookup",3]]],[11,"new","","Creates a raised cosine function.",14,[[]]],[11,"new","","Creates a sinc function.",15,[[]]],[0,"meta","basic_dsp_vector","",null,null],[3,"Real","basic_dsp_vector::meta","Marker for types containing real data.",null,null],[3,"Complex","","Marker for types containing complex data.",null,null],[3,"RealOrComplex","","Marker for types containing real or complex data.",null,null],[12,"is_complex_current","","",16,null],[3,"Time","","Marker for types containing time data.",null,null],[3,"Freq","","Marker for types containing frequency data.",null,null],[3,"TimeOrFreq","","Marker for types containing time or frequency data.",null,null],[12,"domain_current","","",17,null],[11,"default","basic_dsp_vector","Creates multi core settings with default values",0,[[],["multicoresettings",3]]],[11,"single_threaded","","Creates multi core settings so that no thread will be…",0,[[],["multicoresettings",3]]],[11,"parallel","","Creates multi core so that threads will be spawned if this…",0,[[],["multicoresettings",3]]],[11,"new","","Creates multi core settings with the given values.",0,[[],["multicoresettings",3]]],[11,"with_thresholds","","Creates multi core settings with explicit thresholds.",0,[[],["multicoresettings",3]]],[11,"new","","Creates a new buffer from a storage type. The buffer will…",18,[[],["fixedlenbuffer",3]]],[11,"new","","Creates a new buffer which is ready to be passed around.",19,[[],["singlebuffer",3]]],[11,"with_capacity","","Creates a new buffer which is ready to be passed around.",19,[[],["singlebuffer",3]]],[11,"convolve_mat","","Convolves a vector of vectors (in this lib also considered…",2,[[],["voidresult",6]]],[11,"is_erroneous","","Indicates whether or not the operations on this vector…",2,[[]]],[0,"window_functions","","This mod contains a definition for window functions and…",null,null],[3,"TriangularWindow","basic_dsp_vector::window_functions","A triangular window:…",null,null],[3,"HammingWindow","","A generalized Hamming window:…",null,null],[3,"BlackmanHarrisWindow","","A Blackman-Harris Window:…",null,null],[3,"RectangularWindow","","A rectangular window:…",null,null],[8,"WindowFunction","","A window function for FFT windows. See…",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around the y…",20,[[]]],[10,"window","","Calculates a point of the window function. Callers will…",20,[[]]],[11,"new","","Creates a new Hamming window",21,[[]]],[11,"default","","Creates the default Hamming window as defined in GNU Octave.",21,[[]]],[0,"numbers","basic_dsp_vector","Traits from the `num` crate which are used inside…",null,null],[3,"Complex","basic_dsp_vector::numbers","",null,null],[12,"re","","Real portion of the complex number",22,null],[12,"im","","Imaginary portion of the complex number",22,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",23,[[]]],[10,"infinity","","Returns the infinite value.",23,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",23,[[]]],[10,"neg_zero","","Returns `-0.0`.",23,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",23,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",23,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",23,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",23,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",23,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",23,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",23,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",23,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",23,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",23,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",23,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",23,[[]]],[10,"trunc","","Return the integer part of a number.",23,[[]]],[10,"fract","","Returns the fractional part of a number.",23,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",23,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",23,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",23,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",23,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",23,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",23,[[]]],[10,"powi","","Raise a number to an integer power.",23,[[]]],[10,"powf","","Raise a number to a floating point power.",23,[[]]],[10,"sqrt","","Take the square root of a number.",23,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",23,[[]]],[10,"exp2","","Returns `2^(self)`.",23,[[]]],[10,"ln","","Returns the natural logarithm of the number.",23,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",23,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",23,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",23,[[]]],[11,"to_degrees","","Converts radians to degrees.",23,[[]]],[11,"to_radians","","Converts degrees to radians.",23,[[]]],[10,"max","","Returns the maximum of the two numbers.",23,[[]]],[10,"min","","Returns the minimum of the two numbers.",23,[[]]],[10,"abs_sub","","The positive difference of two numbers.",23,[[]]],[10,"cbrt","","Take the cubic root of a number.",23,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",23,[[]]],[10,"sin","","Computes the sine of a number (in radians).",23,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",23,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",23,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",23,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",23,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",23,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",23,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",23,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",23,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",23,[[]]],[10,"sinh","","Hyperbolic sine function.",23,[[]]],[10,"cosh","","Hyperbolic cosine function.",23,[[]]],[10,"tanh","","Hyperbolic tangent function.",23,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",23,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",23,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",23,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",23,[[]]],[8,"Num","","",null,null],[16,"FromStrRadixErr","","",24,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",24,[[],["result",4]]],[8,"One","","",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",25,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",25,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",25,[[]]],[8,"DspNumber","","A trait for a numeric value which at least supports a…",null,null],[8,"ToSimd","","Associates a number type with a SIMD register type.",null,null],[16,"RegFallback","","Type for the SIMD register on the CPU.",26,null],[16,"RegSse","","",26,null],[16,"RegAvx","","",26,null],[16,"RegAvx512","","",26,null],[16,"GpuReg","","Type for the SIMD register on the GPU. Defaults to an…",26,null],[8,"RealNumber","","A real floating pointer number intended to abstract over…",null,null],[8,"Zero","","This trait is necessary so that we can define zero for…",null,null],[10,"zero","","",27,[[]]],[6,"RealTimeVec","basic_dsp_vector","A vector with real numbers in time domain.",null,null],[6,"RealFreqVec","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVec","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVec","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVec","","A vector with no information about number space or domain…",null,null],[6,"RealTimeVecSlice32","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVecSlice32","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVecSlice32","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVecSlice32","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVecSlice32","","A vector with no information about number space or domain…",null,null],[6,"RealTimeVecSlice64","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVecSlice64","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVecSlice64","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVecSlice64","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVecSlice64","","A vector with no information about number space or domain…",null,null],[6,"RealTimeVec32","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVec32","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVec32","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVec32","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVec32","","A vector with no information about number space or domain…",null,null],[6,"RealTimeVec64","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVec64","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVec64","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVec64","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVec64","","A vector with no information about number space or domain…",null,null],[6,"StatsVec","","Alias for a vector of any statistical information.",null,null],[6,"TransRes","","Result for operations which transform a type (most…",null,null],[6,"VoidResult","","Void/nothing in case of success or a reason in case of an…",null,null],[6,"ScalarResult","","Scalar result or a reason in case of an error.",null,null],[17,"STATS_VEC_CAPACTIY","","The maximum `len` for any of the `*split` methods.",null,null],[8,"ToSlice","","A trait to convert a type into a slice.",null,null],[10,"to_slice","","Convert to a slice.",28,[[]]],[10,"len","","Length of a slice.",28,[[]]],[10,"is_empty","","Indicates whether or not this storage type is empty.",28,[[]]],[10,"alloc_len","","Gets the allocated length of a storage. It\'s expected that…",28,[[]]],[10,"try_resize","","Resizes the storage to support at least `len` elements or…",28,[[],["voidresult",6]]],[8,"ToSliceMut","","A trait to convert a type into a mutable slice.",null,null],[10,"to_slice_mut","","Convert to a mutable slice.",29,[[]]],[8,"Resize","","A trait for storage types which are known to have the…",null,null],[10,"resize","","Resize a storage type. Must work for any value of `len`,…",30,[[]]],[8,"ToDspVector","","Conversion from a generic data type into a dsp vector…",null,null],[10,"to_gen_dsp_vec","","Create a new generic vector. `delta` can be changed after…",31,[[["datadomain",4]],["gendspvec",6]]],[10,"to_dsp_vec","","Create a new vector from the given meta data. The meta…",31,[[["typemetadata",3]],["dspvec",3]]],[8,"ToRealVector","","Conversion from a generic data type into a dsp vector with…",null,null],[10,"to_real_time_vec","","Create a new vector in real number space and time domain.…",32,[[],["realtimevec",6]]],[10,"to_real_freq_vec","","Create a new vector in real number space and frequency…",32,[[],["realfreqvec",6]]],[8,"ToComplexVector","","Conversion from a generic data type into a dsp vector with…",null,null],[10,"to_complex_time_vec","","Create a new vector in complex number space and time…",33,[[],["complextimevec",6]]],[10,"to_complex_freq_vec","","Create a new vector in complex number space and frequency…",33,[[],["complexfreqvec",6]]],[8,"FromVectorFloat","","Retrieves the underlying storage from a vector. Returned…",null,null],[16,"Output","","Type of the underlying storage of a vector.",34,null],[10,"getf","","Gets the underlying storage and the number of elements…",34,[[]]],[8,"FromVector","","Retrieves the underlying storage from a vector.",null,null],[16,"Output","","Type of the underlying storage of a vector.",35,null],[10,"get","","Gets the underlying storage and the number of elements…",35,[[]]],[8,"InterleaveToVector","","Conversion from two instances of a generic data type into…",null,null],[10,"interleave_to_complex_time_vec","","Create a new vector in real number space and time domain.…",36,[[],[["result",4],["complextimevec",6],["errorreason",4]]]],[10,"interleave_to_complex_freq_vec","","Create a new vector in real number space and frequency…",36,[[],[["result",4],["errorreason",4],["complexfreqvec",6]]]],[8,"ToDspVectorPar","","Conversion from a generic data type into a dsp vector…",null,null],[10,"to_gen_dsp_vec_par","","Create a new generic vector. `delta` can be changed after…",37,[[["datadomain",4]],["gendspvec",6]]],[10,"to_dsp_vec_par","","Create a new vector from the given meta data. The meta…",37,[[["typemetadata",3]],["dspvec",3]]],[8,"ToRealVectorPar","","Conversion from a generic data type into a dsp vector with…",null,null],[10,"to_real_time_vec_par","","Create a new vector in real number space and time domain.…",38,[[],["realtimevec",6]]],[10,"to_real_freq_vec_par","","Create a new vector in real number space and frequency…",38,[[],["realfreqvec",6]]],[8,"ToComplexVectorPar","","Conversion from a generic data type into a dsp vector with…",null,null],[10,"to_complex_time_vec_par","","Create a new vector in complex number space and time…",39,[[],["complextimevec",6]]],[10,"to_complex_freq_vec_par","","Create a new vector in complex number space and frequency…",39,[[],["complexfreqvec",6]]],[8,"FloatIndex","","Like `std::ops::Index` but with a different method name so…",null,null],[16,"Output","","",40,null],[10,"data","","The method for float indexing. If the vector is real…",40,[[]]],[8,"FloatIndexMut","","Like `std::ops::IndexMut` but with a different method name…",null,null],[10,"data_mut","","The method for real indexing",41,[[]]],[8,"ComplexIndex","","Like `std::ops::Index` but with a different method name so…",null,null],[16,"Output","","",42,null],[10,"datac","","The method for complex indexing",42,[[]]],[8,"ComplexIndexMut","","Like `std::ops::IndexMut` but with a different method name…",null,null],[10,"datac_mut","","The method for complex indexing",43,[[]]],[8,"MetaData","","A trait which provides information about number space and…",null,null],[10,"domain","","The domain in which the data vector resides. Basically…",44,[[],["datadomain",4]]],[10,"is_complex","","Indicates whether the vector contains complex data. This…",44,[[]]],[8,"ResizeOps","","Operations to resize a data type.",null,null],[10,"resize","","Changes `self.len()`. If `self.is_complex()` is true then…",45,[[],["voidresult",6]]],[8,"ResizeBufferedOps","","Operations to resize a data type.",null,null],[10,"resize_b","","Changes `self.len()`. If `self.is_complex()` is true then…",46,[[],["voidresult",6]]],[8,"Vector","","A trait for vector types.",null,null],[10,"delta","","The x-axis delta. If `domain` is time domain then `delta`…",47,[[]]],[10,"set_delta","","Sets the x-axis delta. If `domain` is time domain then…",47,[[]]],[10,"len","","The number of valid elements in the vector. This can be…",47,[[]]],[10,"is_empty","","Indicates whether or not the vector is empty.",47,[[]]],[10,"points","","The number of valid points. If the vector is complex then…",47,[[]]],[10,"get_multicore_settings","","Gets the multi core settings which determine how the work…",47,[[],["multicoresettings",3]]],[10,"set_multicore_settings","","Sets the multi core settings which determine how the work…",47,[[["multicoresettings",3]]]],[10,"alloc_len","","Gets the number of allocated elements in the underlying…",47,[[]]],[8,"GetMetaData","","Gets the meta data of a type. This can be used to create a…",null,null],[10,"get_meta_data","","Gets a copy of the vector meta data. This can be used to…",48,[[],["typemetadata",3]]],[8,"ComplexToRealTransformsOps","","Defines transformations from complex to real number space.",null,null],[10,"magnitude","","Gets the absolute value, magnitude or norm of all vector…",49,[[]]],[10,"magnitude_squared","","Gets the square root of the absolute value of all vector…",49,[[]]],[10,"to_real","","Gets all real elements.",49,[[]]],[10,"to_imag","","Gets all imag elements.",49,[[]]],[10,"phase","","Gets the phase of all elements in [rad].",49,[[]]],[8,"ComplexToRealTransformsOpsBuffered","","Defines transformations from complex to real number space.",null,null],[10,"magnitude_b","","Gets the absolute value, magnitude or norm of all vector…",50,[[]]],[10,"magnitude_squared_b","","Gets the square root of the absolute value of all vector…",50,[[]]],[10,"to_real_b","","Gets all real elements.",50,[[]]],[10,"to_imag_b","","Gets all imag elements.",50,[[]]],[10,"phase_b","","Gets the phase of all elements in [rad].",50,[[]]],[8,"ComplexToRealGetterOps","","Defines getters to get real data from complex types.",null,null],[10,"get_real","","Copies all real elements into the given vector.",51,[[]]],[10,"get_imag","","Copies all imag elements into the given vector.",51,[[]]],[10,"get_magnitude","","Copies the absolute value or magnitude of all vector…",51,[[]]],[10,"get_magnitude_squared","","Copies the absolute value squared or magnitude squared of…",51,[[]]],[10,"get_phase","","Copies the phase of all elements in [rad] into the given…",51,[[]]],[10,"get_real_imag","","Gets the real and imaginary parts and stores them in the…",51,[[]]],[10,"get_mag_phase","","Gets the magnitude and phase and stores them in the given…",51,[[]]],[8,"ComplexToRealSetterOps","","Defines setters to create complex data from real data.",null,null],[10,"set_real_imag","","Overrides the `self` vectors data with the real and…",52,[[],["voidresult",6]]],[10,"set_mag_phase","","Overrides the `self` vectors data with the magnitude and…",52,[[],["voidresult",6]]],[8,"ComplexOps","","Operations on complex types.",null,null],[10,"multiply_complex_exponential","","Multiplies each vector element with…",53,[[]]],[10,"conj","","Calculates the complex conjugate of the vector.",53,[[]]],[8,"RealToComplexTransformsOps","","Defines transformations from real to complex number space.",null,null],[10,"to_complex","","Converts the real vector into a complex vector.",54,[[],["transres",6]]],[8,"RealToComplexTransformsOpsBuffered","","Defines transformations from real to complex number space.",null,null],[10,"to_complex_b","","Converts the real vector into a complex vector. The buffer…",55,[[]]],[8,"RealOps","","Operations on real types.",null,null],[10,"abs","","Gets the absolute value of all vector elements.",56,[[]]],[8,"ModuloOps","","Operations on real types.",null,null],[10,"wrap","","Each value in the vector is dividable by the divisor and…",57,[[]]],[10,"unwrap","","This function corrects the jumps in the given vector which…",57,[[]]],[8,"ApproximatedOps","","Recommended to be only used with the CPU feature flags…",null,null],[10,"ln_approx","","Computes the principal value approximation of natural…",58,[[]]],[10,"exp_approx","","Calculates the natural exponential approximation for every…",58,[[]]],[10,"sin_approx","","Calculates the sine approximation of each element in…",58,[[]]],[10,"cos_approx","","Calculates the cosine approximation of each element in…",58,[[]]],[10,"log_approx","","Calculates the approximated logarithm to the given base…",58,[[]]],[10,"expf_approx","","Calculates the approximated exponential to the given base…",58,[[]]],[10,"powf_approx","","Raises every vector element to approximately a floating…",58,[[]]],[8,"FrequencyDomainOperations","","Defines all operations which are valid on `DataVecs`…",null,null],[10,"mirror","","This function mirrors the spectrum vector to transform a…",59,[[]]],[10,"fft_shift","","Swaps vector halves after a Fourier Transformation.",59,[[]]],[10,"ifft_shift","","Swaps vector halves before an Inverse Fourier…",59,[[]]],[8,"TimeDomainOperations","","Defines all operations which are valid on `DataVecs`…",null,null],[10,"apply_window","","Applies a window to the data vector.",60,[[["windowfunction",8]]]],[10,"unapply_window","","Removes a window from the data vector.",60,[[["windowfunction",8]]]],[8,"TimeToFrequencyDomainOperations","","Defines all operations which are valid on `DataVecs`…",null,null],[10,"plain_fft","","Performs a Fast Fourier Transformation transforming a time…",61,[[]]],[10,"fft","","Performs a Fast Fourier Transformation transforming a time…",61,[[]]],[10,"windowed_fft","","Applies a FFT window and performs a Fast Fourier…",61,[[["windowfunction",8]]]],[8,"SymmetricTimeToFrequencyDomainOperations","","Defines all operations which are valid on `DataVecs`…",null,null],[10,"plain_sfft","","Performs a Symmetric Fast Fourier Transformation under the…",62,[[],["transres",6]]],[10,"sfft","","Performs a Symmetric Fast Fourier Transformation under the…",62,[[],["transres",6]]],[10,"windowed_sfft","","Performs a Symmetric Fast Fourier Transformation under the…",62,[[["windowfunction",8]],["transres",6]]],[8,"FrequencyToTimeDomainOperations","","Defines all operations which are valid on `DataVecs`…",null,null],[10,"plain_ifft","","Performs an Inverse Fast Fourier Transformation…",63,[[]]],[10,"ifft","","Performs an Inverse Fast Fourier Transformation…",63,[[]]],[10,"windowed_ifft","","Performs an Inverse Fast Fourier Transformation…",63,[[["windowfunction",8]]]],[8,"SymmetricFrequencyToTimeDomainOperations","","Defines all operations which are valid on `DataVecs`…",null,null],[10,"plain_sifft","","Performs a Symmetric Inverse Fast Fourier Transformation…",64,[[],["transres",6]]],[10,"sifft","","Performs a Symmetric Inverse Fast Fourier Transformation…",64,[[],["transres",6]]],[10,"windowed_sifft","","Performs a Symmetric Inverse Fast Fourier Transformation…",64,[[["windowfunction",8]],["transres",6]]],[8,"CrossCorrelationArgumentOps","","This trait allows to transform an argument so that it can…",null,null],[10,"prepare_argument","","Prepares an argument to be used for convolution. Preparing…",65,[[]]],[10,"prepare_argument_padded","","Prepares an argument to be used for convolution. The…",65,[[]]],[8,"CrossCorrelationOps","","Cross-correlation of data vectors. See also…",null,null],[10,"correlate","","Calculates the correlation between `self` and `other`.…",66,[[],["voidresult",6]]],[8,"Convolution","","Provides a convolution operations.",null,null],[10,"convolve","","Convolves `self` with the convolution function…",67,[[]]],[8,"ConvolutionOps","","Provides a convolution operation for types which at some…",null,null],[10,"convolve_signal","","Convolves `self` with the convolution function…",68,[[],["voidresult",6]]],[8,"FrequencyMultiplication","","Provides a frequency response multiplication operations.",null,null],[10,"multiply_frequency_response","","Multiplies `self` with the frequency response function…",69,[[]]],[8,"InterpolationOps","","Provides interpolation operations for real and complex…",null,null],[10,"interpolatef","","Interpolates `self` with the convolution function…",70,[[["realimpulseresponse",8]]]],[10,"interpolatei","","Interpolates `self` with the convolution function…",70,[[["realfrequencyresponse",8]],["voidresult",6]]],[10,"interpolate","","Interpolates the signal in frequency domain by padding it…",70,[[["option",4],["realfrequencyresponse",8]],["voidresult",6]]],[10,"interpft","","Interpolates the signal in frequency domain by padding it…",70,[[]]],[10,"decimatei","","Decimates or downsamples `self`. `decimatei` is the…",70,[[]]],[8,"RealInterpolationOps","","Provides interpolation operations which are only…",null,null],[10,"interpolate_hermite","","Piecewise cubic hermite interpolation between samples.",71,[[]]],[10,"interpolate_lin","","Linear interpolation between samples.",71,[[]]],[8,"RededicateOps","","This trait allows to change a data type. The operations…",null,null],[10,"rededicate_from","","Make `Other` a `Self`.",72,[[]]],[8,"RededicateForceOps","","This trait allows to change a data type and performs the…",null,null],[10,"rededicate_from_force","","Make `Other` a `Self` without performing any checks.",73,[[]]],[10,"rededicate_with_runtime_data","","Make `Other` a `Self` without performing any checks.",73,[[["datadomain",4]]]],[8,"RededicateToOps","","This trait allows to change a data type. The operations…",null,null],[10,"rededicate","","Converts `Self` inot `Other`.",74,[[]]],[8,"ToRealResult","","Specifies what the the result is if a type is transformed…",null,null],[16,"RealResult","","",75,null],[8,"ToComplexResult","","Specifies what the the result is if a type is transformed…",null,null],[16,"ComplexResult","","",76,null],[8,"ToTimeResult","","Specifies what the the result is if a type is transformed…",null,null],[16,"TimeResult","","Specifies what the the result is if a type is transformed…",77,null],[8,"ToFreqResult","","Specifies what the the result is if a type is transformed…",null,null],[16,"FreqResult","","",78,null],[8,"ToRealTimeResult","","Specifies what the the result is if a type is transformed…",null,null],[16,"RealTimeResult","","",79,null],[8,"ScaleOps","","An operation which multiplies each vector element with a…",null,null],[10,"scale","","Multiplies the vector element with a scalar.",80,[[]]],[8,"OffsetOps","","An operation which adds a constant to each vector element",null,null],[10,"offset","","Adds a scalar to each vector element.",81,[[]]],[8,"ElementaryOps","","Elementary algebra on types: addition, subtraction,…",null,null],[10,"add","","Calculates the sum of `self + summand`. It consumes self…",82,[[],["voidresult",6]]],[10,"sub","","Calculates the difference of `self - subtrahend`. It…",82,[[],["voidresult",6]]],[10,"mul","","Calculates the product of `self * factor`. It consumes…",82,[[],["voidresult",6]]],[10,"div","","Calculates the quotient of `self / summand`. It consumes…",82,[[],["voidresult",6]]],[8,"ElementaryWrapAroundOps","","Elementary algebra on types where the argument might…",null,null],[10,"add_smaller","","Calculates the sum of `self + summand`. `summand` may be…",83,[[],["voidresult",6]]],[10,"sub_smaller","","Calculates the sum of `self - subtrahend`. `subtrahend`…",83,[[],["voidresult",6]]],[10,"mul_smaller","","Calculates the sum of `self - factor`. `factor` may be…",83,[[],["voidresult",6]]],[10,"div_smaller","","Calculates the sum of `self - divisor`. `divisor` may be…",83,[[],["voidresult",6]]],[8,"TrigOps","","Trigonometry methods.",null,null],[10,"sin","","Calculates the sine of each element in radians.",84,[[]]],[10,"cos","","Calculates the cosine of each element in radians.",84,[[]]],[10,"tan","","Calculates the tangent of each element in radians.",84,[[]]],[10,"asin","","Calculates the principal value of the inverse sine of each…",84,[[]]],[10,"acos","","Calculates the principal value of the inverse cosine of…",84,[[]]],[10,"atan","","Calculates the principal value of the inverse tangent of…",84,[[]]],[10,"sinh","","Calculates the hyperbolic sine each element in radians.",84,[[]]],[10,"cosh","","Calculates the hyperbolic cosine each element in radians.",84,[[]]],[10,"tanh","","Calculates the hyperbolic tangent each element in radians.",84,[[]]],[10,"asinh","","Calculates the principal value of the inverse hyperbolic…",84,[[]]],[10,"acosh","","Calculates the principal value of the inverse hyperbolic…",84,[[]]],[10,"atanh","","Calculates the principal value of the inverse hyperbolic…",84,[[]]],[8,"PowerOps","","Roots, powers, exponentials and logarithms.",null,null],[10,"sqrt","","Gets the square root of all vector elements.",85,[[]]],[10,"square","","Squares all vector elements.",85,[[]]],[10,"root","","Calculates the n-th root of every vector element.",85,[[]]],[10,"powf","","Raises every vector element to a floating point power.",85,[[]]],[10,"ln","","Computes the principal value of natural logarithm of every…",85,[[]]],[10,"exp","","Calculates the natural exponential for every vector element.",85,[[]]],[10,"log","","Calculates the logarithm to the given base for every…",85,[[]]],[10,"expf","","Calculates the exponential to the given base for every…",85,[[]]],[8,"ReorganizeDataOps","","This trait allows to reorganize the data by changing…",null,null],[10,"reverse","","Reverses the data inside the vector.",86,[[]]],[10,"swap_halves","","This function swaps both halves of the vector. This…",86,[[]]],[8,"InsertZerosOps","","A trait to insert zeros into the data at some specified…",null,null],[10,"zero_pad","","Appends zeros add the end of the vector until the vector…",87,[[["paddingoption",4]],["voidresult",6]]],[10,"zero_interleave","","Interleaves zeros `factor - 1`times after every vector…",87,[[],["voidresult",6]]],[8,"InsertZerosOpsBuffered","","A trait to insert zeros into the data at some specified…",null,null],[10,"zero_pad_b","","Appends zeros add the end of the vector until the vector…",88,[[["paddingoption",4]],["voidresult",6]]],[10,"zero_interleave_b","","Interleaves zeros `factor - 1`times after every vector…",88,[[]]],[8,"SplitOps","","Splits the data into several smaller pieces of equal size.",null,null],[10,"split_into","","Splits the vector into several smaller vectors.…",89,[[],["voidresult",6]]],[8,"MergeOps","","Merges several pieces of equal size into one data chunk.",null,null],[10,"merge","","Merges several vectors into `self`. All vectors must have…",90,[[],["voidresult",6]]],[8,"DiffSumOps","","A trait to calculate the diff (1st derivative in a…",null,null],[10,"diff","","Calculates the delta of each elements to its previous…",91,[[]]],[10,"diff_with_start","","Calculates the delta of each elements to its previous…",91,[[]]],[10,"cum_sum","","Calculates the cumulative sum of all elements. This…",91,[[]]],[8,"DotProductOps","","An operation which multiplies each vector element with a…",null,null],[16,"Output","","",92,null],[10,"dot_product","","Calculates the dot product of self and factor. Self and…",92,[[]]],[8,"PreciseDotProductOps","","An operation which multiplies each vector element with a…",null,null],[16,"Output","","",93,null],[10,"dot_product_prec","","Calculates the dot product of self and factor using a more…",93,[[]]],[8,"MapInplaceOps","","Operations which allow to iterate over the vector and to…",null,null],[10,"map_inplace","","Transforms all vector elements using the function `map`.",94,[[]]],[8,"MapAggregateOps","","Operations which allow to iterate over the vector and to…",null,null],[16,"Output","","",95,null],[10,"map_aggregate","","Transforms all vector elements using the function `map`…",95,[[]]],[8,"StatisticsOps","","This trait offers operations to calculate statistics about…",null,null],[16,"Result","","",96,null],[10,"statistics","","Calculates the statistics of the data.",96,[[]]],[8,"StatisticsSplitOps","","This trait offers operations to calculate statistics about…",null,null],[16,"Result","","",97,null],[10,"statistics_split","","Calculates the statistics of the data contained in the…",97,[[],["scalarresult",6]]],[8,"SumOps","","Offers operations to calculate the sum or the sum of…",null,null],[10,"sum","","Calculates the sum of the data contained in the vector.",98,[[]]],[10,"sum_sq","","Calculates the sum of the squared data contained in the…",98,[[]]],[8,"Stats","","Operations on statistics.",null,null],[10,"empty","","Creates an empty statistics struct.",99,[[]]],[10,"empty_vec","","Creates a vector of empty statistics structs.",99,[[],["statsvec",6]]],[10,"invalid","","Creates a statistics struct which resembles an invalid…",99,[[]]],[10,"merge","","Merges several statistics into one.",99,[[]]],[10,"merge_cols","","Merges several vectors of statistics into one vector.",99,[[],["statsvec",6]]],[10,"add","","Adds a new value to the statistics, all statistic fields…",99,[[]]],[8,"PreciseStatisticsOps","","Offers the same functionality as the `StatisticsOps` trait…",null,null],[16,"Result","","",100,null],[10,"statistics_prec","","Calculates the statistics of the data contained in the…",100,[[]]],[8,"PreciseStatisticsSplitOps","","Offers the same functionality as the `StatisticsOps` trait…",null,null],[16,"Result","","",101,null],[10,"statistics_split_prec","","Calculates the statistics of the data contained in the…",101,[[],["scalarresult",6]]],[8,"PreciseSumOps","","Offers the same functionality as the `SumOps` trait but…",null,null],[10,"sum_prec","","Calculates the sum of the data contained in the vector…",102,[[]]],[10,"sum_sq_prec","","Calculates the sum of the squared data contained in the…",102,[[]]],[8,"PreciseStats","","A trait for statistics which allows to add new values in a…",null,null],[10,"add_prec","","Adds a new values to the statistics using the Kahan…",103,[[]]],[8,"BufferBorrow","","A \\\"slice-like\\\" type which also allows to",null,null],[10,"trade","","Moves the content of this slice into `storage`. This…",104,[[]]],[8,"Buffer","","A buffer which can be used by other types. Types will call…",null,null],[16,"Borrow","","The type of the burrow which is returned.",105,null],[10,"borrow","","Asks the buffer for new storage of exactly size `len`. The…",105,[[]]],[10,"alloc_len","","Returns the allocated length of all storage within this…",105,[[]]],[8,"NumberSpace","","Number space (real or complex) information.",null,null],[10,"is_complex","","",106,[[]]],[10,"to_complex","","For implementations which track meta data at runtime this…",106,[[]]],[10,"to_real","","See `to_complex` for more details.",106,[[]]],[8,"Domain","","Domain (time or frequency) information.",null,null],[10,"domain","","",107,[[],["datadomain",4]]],[10,"to_freq","","See `to_complex` for some details.",107,[[]]],[10,"to_time","","See `to_complex` for some details.",107,[[]]],[8,"RealNumberSpace","","Trait for types containing real data.",null,null],[8,"ComplexNumberSpace","","Trait for types containing complex data.",null,null],[8,"TimeDomain","","Trait for types containing time domain data.",null,null],[8,"FrequencyDomain","","Trait for types containing frequency domain data.",null,null],[8,"PosEq","","Expresses at compile time that two classes could…",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","basic_dsp_vector::conv_types","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","basic_dsp_vector::meta","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","basic_dsp_vector::window_functions","",118,[[]]],[11,"into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"zero","basic_dsp_vector::numbers","",22,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"default","","",22,[[],["complex",3]]],[11,"product","","",22,[[],["complex",3]]],[11,"product","","",22,[[],["complex",3]]],[11,"one","","",22,[[],["complex",3]]],[11,"is_one","","",22,[[]]],[11,"set_one","","",22,[[]]],[11,"as_","","",22,[[]]],[11,"mul_assign","","",22,[[["complex",3]]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[["complex",3]]]],[11,"mul_assign","","",22,[[]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"mul","","",22,[[["complex",3]]]],[11,"mul","","",22,[[]]],[11,"mul","","",22,[[]]],[11,"mul","","",22,[[["complex",3]]]],[11,"pow","","",22,[[]]],[11,"pow","","",22,[[]]],[11,"pow","","",22,[[]]],[11,"pow","","",22,[[["complex",3]]]],[11,"pow","","",22,[[]]],[11,"pow","","",22,[[["complex",3]]]],[11,"clone","","",22,[[],["complex",3]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"sub","","",22,[[["complex",3]]]],[11,"sub","","",22,[[]]],[11,"sub","","",22,[[]]],[11,"sub","","",22,[[["complex",3]]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"inv","","",22,[[]]],[11,"neg","","",22,[[]]],[11,"from","","",22,[[],[["complex",3],["option",4]]]],[11,"zero","","",22,[[],["complex",3]]],[11,"is_zero","","",22,[[]]],[11,"set_zero","","",22,[[]]],[11,"div","","",22,[[["complex",3]]]],[11,"div","","",22,[[["complex",3]]]],[11,"div","","",22,[[]]],[11,"div","","",22,[[]]],[11,"rem","","",22,[[]]],[11,"rem","","",22,[[["complex",3]]]],[11,"rem","","",22,[[]]],[11,"rem","","",22,[[["complex",3]]]],[11,"add","","",22,[[["complex",3]]]],[11,"add","","",22,[[["complex",3]]]],[11,"add","","",22,[[]]],[11,"add","","",22,[[]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"mul_add","","",22,[[["complex",3]],["complex",3]]],[11,"from","","",22,[[],["complex",3]]],[11,"from","","",22,[[],["complex",3]]],[11,"eq","","",22,[[["complex",3]]]],[11,"ne","","",22,[[["complex",3]]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[["complex",3]]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[["complex",3]]]],[11,"hash","","",22,[[]]],[11,"to_usize","","",22,[[],["option",4]]],[11,"to_isize","","",22,[[],["option",4]]],[11,"to_u8","","",22,[[],["option",4]]],[11,"to_u16","","",22,[[],["option",4]]],[11,"to_u32","","",22,[[],["option",4]]],[11,"to_u64","","",22,[[],["option",4]]],[11,"to_i8","","",22,[[],["option",4]]],[11,"to_i16","","",22,[[],["option",4]]],[11,"to_i32","","",22,[[],["option",4]]],[11,"to_i64","","",22,[[],["option",4]]],[11,"to_u128","","",22,[[],["option",4]]],[11,"to_i128","","",22,[[],["option",4]]],[11,"to_f32","","",22,[[],["option",4]]],[11,"to_f64","","",22,[[],["option",4]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[["complex",3]]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[["complex",3]]]],[11,"sub_assign","","",22,[[["complex",3]]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[["complex",3]]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",22,[[],[["result",4],["complex",3]]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"mul_add_assign","","",22,[[["complex",3]]]],[11,"mul_add_assign","","",22,[[["complex",3]]]],[11,"from_usize","","",22,[[],[["complex",3],["option",4]]]],[11,"from_isize","","",22,[[],[["complex",3],["option",4]]]],[11,"from_u8","","",22,[[],[["complex",3],["option",4]]]],[11,"from_u16","","",22,[[],[["complex",3],["option",4]]]],[11,"from_u32","","",22,[[],[["complex",3],["option",4]]]],[11,"from_u64","","",22,[[],[["complex",3],["option",4]]]],[11,"from_i8","","",22,[[],[["complex",3],["option",4]]]],[11,"from_i16","","",22,[[],[["complex",3],["option",4]]]],[11,"from_i32","","",22,[[],[["complex",3],["option",4]]]],[11,"from_i64","","",22,[[],[["complex",3],["option",4]]]],[11,"from_u128","","",22,[[],[["complex",3],["option",4]]]],[11,"from_i128","","",22,[[],[["complex",3],["option",4]]]],[11,"from_f32","","",22,[[],[["complex",3],["option",4]]]],[11,"from_f64","","",22,[[],[["complex",3],["option",4]]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",22,[[],[["result",4],["complex",3]]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"sum","","",22,[[],["complex",3]]],[11,"sum","","",22,[[],["complex",3]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[["complex",3]]]],[11,"rem_assign","","",22,[[["complex",3]]]],[11,"is_symmetric","basic_dsp_vector::conv_types","",10,[[]]],[11,"calc","","",10,[[]]],[11,"is_symmetric","","",10,[[]]],[11,"calc","","",10,[[]]],[11,"is_symmetric","","",14,[[]]],[11,"calc","","",14,[[]]],[11,"is_symmetric","","",15,[[]]],[11,"calc","","",15,[[]]],[11,"is_symmetric","","",11,[[]]],[11,"calc","","",11,[[]]],[11,"is_symmetric","","",11,[[]]],[11,"calc","","",11,[[]]],[11,"is_symmetric","","",14,[[]]],[11,"calc","","",14,[[]]],[11,"is_symmetric","","",15,[[]]],[11,"calc","","",15,[[]]],[11,"is_symmetric","","",12,[[]]],[11,"calc","","",12,[[],["complex32",6]]],[11,"is_symmetric","","",12,[[]]],[11,"calc","","",12,[[],["complex64",6]]],[11,"is_symmetric","","",13,[[]]],[11,"calc","","",13,[[],["complex32",6]]],[11,"is_symmetric","","",13,[[]]],[11,"calc","","",13,[[],["complex64",6]]],[11,"getf","basic_dsp_vector","",2,[[]]],[11,"get","","",2,[[]]],[11,"get","","",2,[[]]],[11,"get","","",2,[[]]],[11,"get","","",2,[[]]],[11,"data","","",2,[[]]],[11,"data","","",2,[[["rangefull",3]]]],[11,"data","","",2,[[["rangefrom",3]]]],[11,"data","","",2,[[["rangeto",3]]]],[11,"data","","",2,[[["range",3]]]],[11,"data_mut","","",2,[[]]],[11,"data_mut","","",2,[[["rangefull",3]]]],[11,"data_mut","","",2,[[["rangefrom",3]]]],[11,"data_mut","","",2,[[["rangeto",3]]]],[11,"data_mut","","",2,[[["range",3]]]],[11,"datac","","",2,[[],["complex",3]]],[11,"datac","","",2,[[["rangefull",3]]]],[11,"datac","","",2,[[["rangefrom",3]]]],[11,"datac","","",2,[[["rangeto",3]]]],[11,"datac","","",2,[[["range",3]]]],[11,"datac_mut","","",2,[[],["complex",3]]],[11,"datac_mut","","",2,[[["rangefull",3]]]],[11,"datac_mut","","",2,[[["rangefrom",3]]]],[11,"datac_mut","","",2,[[["rangeto",3]]]],[11,"datac_mut","","",2,[[["range",3]]]],[11,"domain","","",2,[[],["datadomain",4]]],[11,"is_complex","","",2,[[]]],[11,"domain","","",112,[[],["datadomain",4]]],[11,"is_complex","","",112,[[]]],[11,"resize","","",2,[[],["voidresult",6]]],[11,"resize_b","","",2,[[],["voidresult",6]]],[11,"delta","","",2,[[]]],[11,"set_delta","","",2,[[]]],[11,"len","","",2,[[]]],[11,"is_empty","","",2,[[]]],[11,"points","","",2,[[]]],[11,"get_multicore_settings","","",2,[[],["multicoresettings",3]]],[11,"set_multicore_settings","","",2,[[["multicoresettings",3]]]],[11,"alloc_len","","",2,[[]]],[11,"get_meta_data","","",2,[[],["typemetadata",3]]],[11,"magnitude","","",2,[[]]],[11,"magnitude_squared","","",2,[[]]],[11,"to_real","","",2,[[]]],[11,"to_imag","","",2,[[]]],[11,"phase","","",2,[[]]],[11,"magnitude_b","","",2,[[]]],[11,"magnitude_squared_b","","",2,[[]]],[11,"to_real_b","","",2,[[]]],[11,"to_imag_b","","",2,[[]]],[11,"phase_b","","",2,[[]]],[11,"get_real","","",2,[[]]],[11,"get_imag","","",2,[[]]],[11,"get_magnitude","","",2,[[]]],[11,"get_magnitude_squared","","",2,[[]]],[11,"get_phase","","",2,[[]]],[11,"get_real_imag","","",2,[[]]],[11,"get_mag_phase","","",2,[[]]],[11,"set_real_imag","","",2,[[],["voidresult",6]]],[11,"set_mag_phase","","",2,[[],["voidresult",6]]],[11,"multiply_complex_exponential","","",2,[[]]],[11,"conj","","",2,[[]]],[11,"to_complex","","",2,[[],["transres",6]]],[11,"to_complex_b","","",2,[[]]],[11,"abs","","",2,[[]]],[11,"wrap","","",2,[[]]],[11,"unwrap","","",2,[[]]],[11,"ln_approx","","",2,[[]]],[11,"exp_approx","","",2,[[]]],[11,"sin_approx","","",2,[[]]],[11,"cos_approx","","",2,[[]]],[11,"log_approx","","",2,[[]]],[11,"expf_approx","","",2,[[]]],[11,"powf_approx","","",2,[[]]],[11,"mirror","","",2,[[]]],[11,"fft_shift","","",2,[[]]],[11,"ifft_shift","","",2,[[]]],[11,"apply_window","","",2,[[["windowfunction",8]]]],[11,"unapply_window","","",2,[[["windowfunction",8]]]],[11,"plain_fft","","",2,[[]]],[11,"fft","","",2,[[]]],[11,"windowed_fft","","",2,[[["windowfunction",8]]]],[11,"plain_sfft","","",2,[[],["transres",6]]],[11,"sfft","","",2,[[],["transres",6]]],[11,"windowed_sfft","","",2,[[["windowfunction",8]],["transres",6]]],[11,"plain_ifft","","",2,[[]]],[11,"ifft","","",2,[[]]],[11,"windowed_ifft","","",2,[[["windowfunction",8]]]],[11,"plain_sifft","","",2,[[],["transres",6]]],[11,"sifft","","",2,[[],["transres",6]]],[11,"windowed_sifft","","",2,[[["windowfunction",8]],["transres",6]]],[11,"prepare_argument","","",2,[[]]],[11,"prepare_argument_padded","","",2,[[]]],[11,"correlate","","",2,[[],["voidresult",6]]],[11,"convolve","","",2,[[["realimpulseresponse",8]]]],[11,"convolve","","",2,[[["compleximpulseresponse",8]]]],[11,"convolve_signal","","",2,[[["dspvec",3]],["voidresult",6]]],[11,"multiply_frequency_response","","",2,[[["complexfrequencyresponse",8]]]],[11,"multiply_frequency_response","","",2,[[["realfrequencyresponse",8]]]],[11,"interpolatef","","",2,[[["realimpulseresponse",8]]]],[11,"interpolatei","","",2,[[["realfrequencyresponse",8]],["voidresult",6]]],[11,"interpft","","",2,[[]]],[11,"interpolate","","",2,[[["option",4],["realfrequencyresponse",8]],["voidresult",6]]],[11,"decimatei","","",2,[[]]],[11,"interpolate_lin","","",2,[[]]],[11,"interpolate_hermite","","",2,[[]]],[11,"rededicate_from","","",2,[[]]],[11,"rededicate_from_force","","",121,[[["dspvec",3]]]],[11,"rededicate_with_runtime_data","","",121,[[["dspvec",3],["datadomain",4]]]],[11,"rededicate_from_force","","",122,[[["dspvec",3]]]],[11,"rededicate_with_runtime_data","","",122,[[["dspvec",3],["datadomain",4]]]],[11,"rededicate_from_force","","",123,[[["dspvec",3]]]],[11,"rededicate_with_runtime_data","","",123,[[["dspvec",3],["datadomain",4]]]],[11,"rededicate_from_force","","",124,[[["dspvec",3]]]],[11,"rededicate_with_runtime_data","","",124,[[["dspvec",3],["datadomain",4]]]],[11,"rededicate_from_force","","",125,[[["dspvec",3]]]],[11,"rededicate_with_runtime_data","","",125,[[["dspvec",3],["datadomain",4]]]],[11,"rededicate","","",2,[[]]],[11,"scale","","",2,[[]]],[11,"scale","","",2,[[["complex",3]]]],[11,"offset","","",2,[[]]],[11,"offset","","",2,[[["complex",3]]]],[11,"add","","",2,[[],["voidresult",6]]],[11,"sub","","",2,[[],["voidresult",6]]],[11,"mul","","",2,[[],["voidresult",6]]],[11,"div","","",2,[[],["voidresult",6]]],[11,"add_smaller","","",2,[[],["voidresult",6]]],[11,"sub_smaller","","",2,[[],["voidresult",6]]],[11,"mul_smaller","","",2,[[],["voidresult",6]]],[11,"div_smaller","","",2,[[],["voidresult",6]]],[11,"sin","","",2,[[]]],[11,"cos","","",2,[[]]],[11,"tan","","",2,[[]]],[11,"asin","","",2,[[]]],[11,"acos","","",2,[[]]],[11,"atan","","",2,[[]]],[11,"sinh","","",2,[[]]],[11,"cosh","","",2,[[]]],[11,"tanh","","",2,[[]]],[11,"asinh","","",2,[[]]],[11,"acosh","","",2,[[]]],[11,"atanh","","",2,[[]]],[11,"sqrt","","",2,[[]]],[11,"square","","",2,[[]]],[11,"root","","",2,[[]]],[11,"powf","","",2,[[]]],[11,"ln","","",2,[[]]],[11,"exp","","",2,[[]]],[11,"log","","",2,[[]]],[11,"expf","","",2,[[]]],[11,"reverse","","",2,[[]]],[11,"swap_halves","","",2,[[]]],[11,"zero_pad","","",2,[[["paddingoption",4]],["voidresult",6]]],[11,"zero_interleave","","",2,[[],["voidresult",6]]],[11,"zero_pad_b","","",2,[[["paddingoption",4]],["voidresult",6]]],[11,"zero_interleave_b","","",2,[[]]],[11,"split_into","","",2,[[],["voidresult",6]]],[11,"merge","","",2,[[],["voidresult",6]]],[11,"diff","","",2,[[]]],[11,"diff_with_start","","",2,[[]]],[11,"cum_sum","","",2,[[]]],[11,"dot_product","","",2,[[],["scalarresult",6]]],[11,"dot_product","","",2,[[],[["complex",3],["scalarresult",6]]]],[11,"dot_product_prec","","",2,[[],["scalarresult",6]]],[11,"dot_product_prec","","",2,[[],[["complex",3],["scalarresult",6]]]],[11,"map_inplace","","",2,[[]]],[11,"map_inplace","","",2,[[]]],[11,"map_aggregate","","",2,[[],["scalarresult",6]]],[11,"map_aggregate","","",2,[[],["scalarresult",6]]],[11,"statistics","","",2,[[],["statistics",3]]],[11,"statistics","","",2,[[],[["complex",3],["statistics",3]]]],[11,"statistics_split","","",2,[[],[["statsvec",6],["scalarresult",6]]]],[11,"statistics_split","","",2,[[],[["statsvec",6],["scalarresult",6]]]],[11,"sum","","",2,[[]]],[11,"sum_sq","","",2,[[]]],[11,"sum","","",2,[[],["complex",3]]],[11,"sum_sq","","",2,[[],["complex",3]]],[11,"empty","","",1,[[]]],[11,"invalid","","",1,[[]]],[11,"merge","","",1,[[],["statistics",3]]],[11,"merge_cols","","",1,[[],["statsvec",6]]],[11,"empty_vec","","",1,[[],["statsvec",6]]],[11,"add","","",1,[[]]],[11,"empty","","",1,[[]]],[11,"invalid","","",1,[[]]],[11,"merge","","",1,[[],[["complex",3],["statistics",3]]]],[11,"merge_cols","","",1,[[],["statsvec",6]]],[11,"empty_vec","","",1,[[],["statsvec",6]]],[11,"add","","",1,[[["complex",3]]]],[11,"statistics_prec","","",2,[[],["statistics",3]]],[11,"statistics_prec","","",2,[[],["statistics",3]]],[11,"statistics_prec","","",2,[[],[["statistics",3],["complex",3]]]],[11,"statistics_prec","","",2,[[],[["statistics",3],["complex",3]]]],[11,"statistics_split_prec","","",2,[[],[["statsvec",6],["scalarresult",6]]]],[11,"statistics_split_prec","","",2,[[],[["statsvec",6],["scalarresult",6]]]],[11,"statistics_split_prec","","",2,[[],[["scalarresult",6],["statsvec",6]]]],[11,"statistics_split_prec","","",2,[[],[["scalarresult",6],["statsvec",6]]]],[11,"sum_prec","","",2,[[]]],[11,"sum_sq_prec","","",2,[[]]],[11,"sum_prec","","",2,[[]]],[11,"sum_sq_prec","","",2,[[]]],[11,"sum_prec","","",2,[[],["complex",3]]],[11,"sum_sq_prec","","",2,[[],["complex",3]]],[11,"sum_prec","","",2,[[],["complex",3]]],[11,"sum_sq_prec","","",2,[[],["complex",3]]],[11,"add_prec","","",1,[[]]],[11,"add_prec","","",1,[[["complex",3],["complex",3]]]],[11,"trade","","",108,[[]]],[11,"trade","","",109,[[["vec",3]]]],[11,"trade","","",111,[[["vec",3]]]],[11,"trade","","",113,[[]]],[11,"borrow","","",18,[[]]],[11,"alloc_len","","",18,[[]]],[11,"borrow","","",19,[[]]],[11,"alloc_len","","",19,[[]]],[11,"borrow","","",110,[[]]],[11,"alloc_len","","",110,[[]]],[11,"is_complex","basic_dsp_vector::meta","",114,[[]]],[11,"to_complex","","",114,[[]]],[11,"to_real","","",114,[[]]],[11,"is_complex","","",115,[[]]],[11,"to_complex","","",115,[[]]],[11,"to_real","","",115,[[]]],[11,"is_complex","","",16,[[]]],[11,"to_complex","","",16,[[]]],[11,"to_real","","",16,[[]]],[11,"domain","","",116,[[],["datadomain",4]]],[11,"to_freq","","",116,[[]]],[11,"to_time","","",116,[[]]],[11,"domain","","",117,[[],["datadomain",4]]],[11,"to_time","","",117,[[]]],[11,"to_freq","","",117,[[]]],[11,"domain","","",17,[[],["datadomain",4]]],[11,"to_freq","","",17,[[]]],[11,"to_time","","",17,[[]]],[11,"is_symmetric","basic_dsp_vector::window_functions","",118,[[]]],[11,"window","","",118,[[]]],[11,"is_symmetric","","",21,[[]]],[11,"window","","",21,[[]]],[11,"is_symmetric","","",119,[[]]],[11,"window","","",119,[[]]],[11,"is_symmetric","","",120,[[]]],[11,"window","","",120,[[]]],[11,"zero","basic_dsp_vector::numbers","",22,[[]]],[11,"from","basic_dsp_vector","",121,[[]]],[11,"from","","",123,[[]]],[11,"from","","",122,[[]]],[11,"from","","",124,[[]]],[11,"clone","basic_dsp_vector::meta","",114,[[],["real",3]]],[11,"clone","","",115,[[],["complex",3]]],[11,"clone","","",16,[[],["realorcomplex",3]]],[11,"clone","","",116,[[],["time",3]]],[11,"clone","","",117,[[],["freq",3]]],[11,"clone","","",17,[[],["timeorfreq",3]]],[11,"clone","basic_dsp_vector","",0,[[],["multicoresettings",3]]],[11,"clone","","",2,[[]]],[11,"clone_from","","",2,[[]]],[11,"clone","","",3,[[],["errorreason",4]]],[11,"clone","","",4,[[],["paddingoption",4]]],[11,"clone","","",1,[[],["statistics",3]]],[11,"clone","","",5,[[],["datadomain",4]]],[11,"clone","","",112,[[],["typemetadata",3]]],[11,"default","basic_dsp_vector::conv_types","",15,[[],["sincfunction",3]]],[11,"default","basic_dsp_vector","",19,[[],["singlebuffer",3]]],[11,"eq","basic_dsp_vector::meta","",114,[[["real",3]]]],[11,"eq","","",115,[[["complex",3]]]],[11,"eq","","",16,[[["realorcomplex",3]]]],[11,"ne","","",16,[[["realorcomplex",3]]]],[11,"eq","","",116,[[["time",3]]]],[11,"eq","","",117,[[["freq",3]]]],[11,"eq","","",17,[[["timeorfreq",3]]]],[11,"ne","","",17,[[["timeorfreq",3]]]],[11,"eq","basic_dsp_vector","",3,[[["errorreason",4]]]],[11,"eq","","",4,[[["paddingoption",4]]]],[11,"eq","","",1,[[["statistics",3]]]],[11,"ne","","",1,[[["statistics",3]]]],[11,"eq","","",5,[[["datadomain",4]]]],[11,"deref","","",108,[[]]],[11,"deref","","",109,[[]]],[11,"deref","","",111,[[]]],[11,"deref","","",113,[[]]],[11,"deref_mut","","",108,[[]]],[11,"deref_mut","","",109,[[]]],[11,"deref_mut","","",111,[[]]],[11,"deref_mut","","",113,[[]]],[11,"fmt","basic_dsp_vector::meta","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","basic_dsp_vector","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"index","","",2,[[]]],[11,"index","","",2,[[["rangefull",3]]]],[11,"index","","",2,[[["rangefrom",3]]]],[11,"index","","",2,[[["rangeto",3]]]],[11,"index","","",2,[[["range",3]]]],[11,"index","","",2,[[],["complex",3]]],[11,"index","","",2,[[["rangefull",3]]]],[11,"index","","",2,[[["rangefrom",3]]]],[11,"index","","",2,[[["rangeto",3]]]],[11,"index","","",2,[[["range",3]]]],[11,"index_mut","","",2,[[]]],[11,"index_mut","","",2,[[["rangefull",3]]]],[11,"index_mut","","",2,[[["rangefrom",3]]]],[11,"index_mut","","",2,[[["rangeto",3]]]],[11,"index_mut","","",2,[[["range",3]]]],[11,"index_mut","","",2,[[],["complex",3]]],[11,"index_mut","","",2,[[["rangefull",3]]]],[11,"index_mut","","",2,[[["rangefrom",3]]]],[11,"index_mut","","",2,[[["rangeto",3]]]],[11,"index_mut","","",2,[[["range",3]]]],[11,"new","basic_dsp_vector::numbers","Create a new Complex",22,[[],["complex",3]]],[11,"i","","Returns imaginary unit",22,[[],["complex",3]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn\'t…",22,[[]]],[11,"scale","","Multiplies `self` by the scalar `t`.",22,[[],["complex",3]]],[11,"unscale","","Divides `self` by the scalar `t`.",22,[[],["complex",3]]],[11,"powu","","Raises `self` to an unsigned integer power.",22,[[],["complex",3]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",22,[[],["complex",3]]],[11,"inv","","Returns `1/self`",22,[[],["complex",3]]],[11,"powi","","Raises `self` to a signed integer power.",22,[[],["complex",3]]],[11,"l1_norm","","Returns the L1 norm `|re| + |im|` -- the Manhattan…",22,[[]]],[11,"norm","","Calculate |self|",22,[[]]],[11,"arg","","Calculate the principal Arg of self.",22,[[]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r *…",22,[[]]],[11,"from_polar","","Convert a polar representation into a complex number.",22,[[],["complex",3]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural…",22,[[],["complex",3]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",22,[[],["complex",3]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",22,[[],["complex",3]]],[11,"cbrt","","Computes the principal value of the cube root of `self`.",22,[[],["complex",3]]],[11,"powf","","Raises `self` to a floating point power.",22,[[],["complex",3]]],[11,"log","","Returns the logarithm of `self` with respect to an…",22,[[],["complex",3]]],[11,"powc","","Raises `self` to a complex power.",22,[[["complex",3]],["complex",3]]],[11,"expf","","Raises a floating point number to the complex power `self`.",22,[[],["complex",3]]],[11,"sin","","Computes the sine of `self`.",22,[[],["complex",3]]],[11,"cos","","Computes the cosine of `self`.",22,[[],["complex",3]]],[11,"tan","","Computes the tangent of `self`.",22,[[],["complex",3]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",22,[[],["complex",3]]],[11,"acos","","Computes the principal value of the inverse cosine of…",22,[[],["complex",3]]],[11,"atan","","Computes the principal value of the inverse tangent of…",22,[[],["complex",3]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",22,[[],["complex",3]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",22,[[],["complex",3]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",22,[[],["complex",3]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of…",22,[[],["complex",3]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine…",22,[[],["complex",3]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent…",22,[[],["complex",3]]],[11,"finv","","Returns `1/self` using floating-point operations.",22,[[],["complex",3]]],[11,"fdiv","","Returns `self/other` using floating-point operations.",22,[[["complex",3]],["complex",3]]],[11,"is_nan","","Checks if the given complex number is NaN",22,[[]]],[11,"is_infinite","","Checks if the given complex number is infinite",22,[[]]],[11,"is_finite","","Checks if the given complex number is finite",22,[[]]],[11,"is_normal","","Checks if the given complex number is normal",22,[[]]]],"p":[[3,"MultiCoreSettings"],[3,"Statistics"],[3,"DspVec"],[4,"ErrorReason"],[4,"PaddingOption"],[4,"DataDomain"],[8,"RealImpulseResponse"],[8,"RealFrequencyResponse"],[8,"ComplexImpulseResponse"],[8,"ComplexFrequencyResponse"],[3,"RealTimeLinearTableLookup"],[3,"RealFrequencyLinearTableLookup"],[3,"ComplexTimeLinearTableLookup"],[3,"ComplexFrequencyLinearTableLookup"],[3,"RaisedCosineFunction"],[3,"SincFunction"],[3,"RealOrComplex"],[3,"TimeOrFreq"],[3,"FixedLenBuffer"],[3,"SingleBuffer"],[8,"WindowFunction"],[3,"HammingWindow"],[3,"Complex"],[8,"Float"],[8,"Num"],[8,"One"],[8,"ToSimd"],[8,"Zero"],[8,"ToSlice"],[8,"ToSliceMut"],[8,"Resize"],[8,"ToDspVector"],[8,"ToRealVector"],[8,"ToComplexVector"],[8,"FromVectorFloat"],[8,"FromVector"],[8,"InterleaveToVector"],[8,"ToDspVectorPar"],[8,"ToRealVectorPar"],[8,"ToComplexVectorPar"],[8,"FloatIndex"],[8,"FloatIndexMut"],[8,"ComplexIndex"],[8,"ComplexIndexMut"],[8,"MetaData"],[8,"ResizeOps"],[8,"ResizeBufferedOps"],[8,"Vector"],[8,"GetMetaData"],[8,"ComplexToRealTransformsOps"],[8,"ComplexToRealTransformsOpsBuffered"],[8,"ComplexToRealGetterOps"],[8,"ComplexToRealSetterOps"],[8,"ComplexOps"],[8,"RealToComplexTransformsOps"],[8,"RealToComplexTransformsOpsBuffered"],[8,"RealOps"],[8,"ModuloOps"],[8,"ApproximatedOps"],[8,"FrequencyDomainOperations"],[8,"TimeDomainOperations"],[8,"TimeToFrequencyDomainOperations"],[8,"SymmetricTimeToFrequencyDomainOperations"],[8,"FrequencyToTimeDomainOperations"],[8,"SymmetricFrequencyToTimeDomainOperations"],[8,"CrossCorrelationArgumentOps"],[8,"CrossCorrelationOps"],[8,"Convolution"],[8,"ConvolutionOps"],[8,"FrequencyMultiplication"],[8,"InterpolationOps"],[8,"RealInterpolationOps"],[8,"RededicateOps"],[8,"RededicateForceOps"],[8,"RededicateToOps"],[8,"ToRealResult"],[8,"ToComplexResult"],[8,"ToTimeResult"],[8,"ToFreqResult"],[8,"ToRealTimeResult"],[8,"ScaleOps"],[8,"OffsetOps"],[8,"ElementaryOps"],[8,"ElementaryWrapAroundOps"],[8,"TrigOps"],[8,"PowerOps"],[8,"ReorganizeDataOps"],[8,"InsertZerosOps"],[8,"InsertZerosOpsBuffered"],[8,"SplitOps"],[8,"MergeOps"],[8,"DiffSumOps"],[8,"DotProductOps"],[8,"PreciseDotProductOps"],[8,"MapInplaceOps"],[8,"MapAggregateOps"],[8,"StatisticsOps"],[8,"StatisticsSplitOps"],[8,"SumOps"],[8,"Stats"],[8,"PreciseStatisticsOps"],[8,"PreciseStatisticsSplitOps"],[8,"PreciseSumOps"],[8,"PreciseStats"],[8,"BufferBorrow"],[8,"Buffer"],[8,"NumberSpace"],[8,"Domain"],[3,"FixedLenBufferBurrow"],[3,"SingleBufferBurrow"],[3,"NoBuffer"],[3,"NoBufferBurrow"],[3,"TypeMetaData"],[3,"NoTradeBufferBurrow"],[3,"Real"],[3,"Complex"],[3,"Time"],[3,"Freq"],[3,"TriangularWindow"],[3,"BlackmanHarrisWindow"],[3,"RectangularWindow"],[6,"RealTimeVec"],[6,"RealFreqVec"],[6,"ComplexTimeVec"],[6,"ComplexFreqVec"],[6,"GenDspVec"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);